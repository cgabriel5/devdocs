// IIFE start
(function(window) {
	"use strict";
	var library = (function() {
		// =============================== Helper Functions
		/**
		 * @description [Generates a simple ID containing letters and numbers.]
		 * @param  {Number} length [The length the ID should be. Max length is 22 characters]
		 * @return {String}        [The newly generated ID.]
		 * @source {http://stackoverflow.com/a/38622545}
		 */
		function id(length) {
			return Math.random()
				.toString(36)
				.substr(2, length);
		}
		/**
		 * @description [Returns index of given value in provided array.]
		 * @param  {Array}    array [The array to check against.]
		 * @param  {Integer}  value [The value to check.]
		 * @return {Integer}        [Returns the index value. -1 if not in array.]
		 */
		function index(array, value) {
			return array.indexOf(value);
		}
		/**
		 * @description [Checks if the given value is in provided array or string.]
		 * @param  {Array|String}   iterable [The array or string to check against.]
		 * @param  {Any}            value    [The value to check.]
		 * @return {Boolean}                 [description]
		 * @source [https://www.joezimjs.com/javascript/great-mystery-of-the-tilde/]
		 * @source [http://stackoverflow.com/questions/12299665/what-does-a-tilde-do-
		 * when-it-precedes-an-expression/12299717#12299717]
		 */
		function includes(iterable, value) {
			return -~index(iterable, value);
		}
		/**
		 * @description [Checks if the provided index exists.]
		 * @param  {Number} index [The index (number) to check.]
		 * @return {Boolean}       [False if -1. Otherwise, true.]
		 */
		function indexed(index) {
			return -~index ? true : false;
		}
		/**
		 * @description [Makes an Array from an array like object (ALO). ALO must have a length property
		 *               for it to work.]
		 * @param  {ALO} alo [The ALO.]
		 * @return {Array}   [The created array.]
		 */
		function to_array(alo) {
			// vars
			var true_array = [];
			// loop through ALO and pushing items into true_array
			for (var i = 0, l = alo.length; i < l; i++) true_array.push(alo[i]);
			return true_array;
		}
		/**
		 * @description [Returns the data type of the provided object.]
		 * @param  {Any} object [The object to check.]
		 * @return {String}    [The data type of the checked object.]
		 */
		var dtype = function(object) {
			// will always return something like "[object {type}]"
			return Object.prototype.toString
				.call(object)
				.replace(/(\[object |\])/g, "")
				.toLowerCase();
		};
		/**
		 * @description [Check if the provided object is of the provided data types.]
		 * @param  {Any} object [The object to check.]
		 * @param  {String}  types  [The allowed data type the object may be.]
		 * @return {Boolean}        [Boolean indicating whether the object is of the
		 *                           allowed data types.]
		 */
		dtype.is = function(object, types) {
			// get the object type
			var type = this(object);
			// prepare the types
			types = "|" + types.toLowerCase().trim() + "|";
			// check if the object's type is in the list
			return Boolean(-~types.indexOf("|" + type + "|"));
		};
		/**
		 * @description [Check if the provided object is not of the provided data types.]
		 * @param  {Any} object [The object to check.]
		 * @param  {String}  types  [The prohibited data types.]
		 * @return {Boolean}        [Boolean indicating whether the object is not of the
		 *                           allowed data types.]
		 */
		dtype.isnot = function(object, types) {
			// return the inverse of the is method
			return !this.is(object, types);
		};
		/**
		 * @description [A class wrapper. Creates a class based on provided object containing class constructor__ and methods__.
		 *               If class needs to extend another, provide it under the extend__ property.]
		 * @param  {Object} cobject [The class object containing three properties: constructor__, methods__, and extend__.
		 *                           .constructor__ {Function}       [The class constructor]
		 *                           .methods__     {Object}         [Object containing class methods.]
		 *                           .extend__      {Boolean|Object} [Set to false if does not need to extend. Otherwise, provide the
		 *                                                            class to extend.]
		 *                           ]
		 * @return {Function}         [Returns class constructor.]
		 */
		function class__(cobject) {
			// cache class data
			var constructor = cobject.constructor__,
				methods = cobject.methods__,
				parent = cobject.extend__;
			// extend if parent class provided
			if (parent) {
				constructor.prototype = Object.create(parent.prototype);
				constructor.prototype.constructor = constructor;
			}
			// cache prototype
			var prototype = constructor.prototype;
			// add class methods to prototype
			for (var method in methods) {
				if (methods.hasOwnProperty(method)) {
					prototype[method] = methods[method];
				}
			}
			return constructor;
		}
		// =============================== Core Library Functions
		/**
		 * @description [Normalizes the XHR options. In essence, function used the provided
		 *               options and resorts to using the default options for user omitted
		 *               options.]
		 * @param  {Object} _ [The http object.]
		 * @return {Object}   [The normalized options.]
		 */
		function normalize_options(_) {
			// get the XHR object
			var options = _.options,
				properties = _.properties;
			// lock the XHR object...properties can no longer be added
			properties.locked = true;
			// new object to contain options
			var normalized = {
				// set the defaults
				url: options.url || document.URL, // default: current URL location
				method: (options.method || "GET").toUpperCase(), // default: GET
				data: options.data || null, // default: null
				// are files being uploaded? If true the content type is left out and left up to browser.
				fileUpload: options.fileUpload || false,
				async: !options.async ? true : options.async, // default: true
				processData: options.processData === false ? false : true,
				postJSON: options.postJSON || false,
				parseJSON: options.parseJSON || false,
				id: options.id || properties.id,
				withCredentials: options.withCredentials || false,
				// {https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType}
				responseType: options.responseType || "",
				timeout: options.timeout || 10000
			};
			// add the id to the objects properties
			properties.id = normalized.id;
			// set the cache flag
			normalized.cache = !options.cache ? false : options.cache; // default: false
			// work the event handlers
			var events = options.events || {},
				noop = function() {
					/* noop */
				};
			// normalize the events object
			events = {
				abort: events.abort || noop,
				progress: events.progress || noop,
				timeout: events.timeout || noop,
				readystatechange: events.readystatechange || noop,
				loadstart: events.loadstart || noop,
				loadend: events.loadend || noop,
				load: events.load || noop,
				error: events.error || noop
			};
			// work the headers
			var headers = options.headers || [],
				default_content_type =
					"application/x-www-form-urlencoded;charset=UTF-8";
			// normalize the content-type
			// Rules...
			// 1) If it's a file upload leave content-type empty unless user provides it via the headers
			// 2) Default to application/x-www-form-urlencoded;charset=UTF-8 for non file uploads
			//
			// if files are being uploaded let the browser set
			// the content type and form boundary set the headers
			// so remove the header if set
			if (!normalized.fileUpload) {
				// add the default content type if nothing was provided
				// check if content type is provided, if not its added
				for (var i = 0, l = headers.length; i < l; i++) {
					// check if the content type has been added
					if (headers[i][0].toLowerCase() === "content-type") break;
					// else if we get to the last one we add the content-type
					if (i === l - 1) {
						// add if not a file upload
						headers.push(["Content-Type", default_content_type]);
					}
				}
				// if no headers add the basic content-type header
				if (!headers.length) {
					headers.push(["Content-Type", default_content_type]);
				}
			}
			// add the events, headers to the normalized object
			normalized.events = events;
			normalized.headers = headers;
			// set the options
			_.options = normalized;
			// return the options
			return normalized;
		}
		/**
		 * @description [Removed all events from XHR object.]
		 * @param  {Object} _ [The http object.]
		 * @return {Undefined}   [Nothing is returned.]
		 */
		function remove_events(_) {
			// get the XHR object
			var xhr = _.xhr,
				callbacks = _.properties.callbacks;
			// loop over callbacks and remove them
			for (var callback in callbacks) {
				if (callbacks.hasOwnProperty(callback)) {
					xhr.removeEventListener(
						callback,
						callbacks[callback],
						false
					);
				}
			}
		}
		// =============================== Library Class
		var Library = class__({
			/**
			 * @description [The library class constructor.]
			 * @param  {String} url [The request url.]
			 * @return {Undefined}     [Nothing is returned.]
			 */
			constructor__: function(url) {
				// https://toddmotto.com/writing-a-standalone-ajax-xhr-javascript-micro-library/
				// http://blog.garstasio.com/you-dont-need-jquery/ajax/#getting
				// http://www.w3schools.com/jquery/ajax_ajax.asp
				// http://stackoverflow.com/questions/14322984/differences-between-contenttype-and-datatype-in-jquery-ajax-function
				// if user does not invoke library with new keyword we use it for them by
				// returning a new instance of the library with the new keyword.
				if (!(this instanceof Library)) return new Library();
				// create the new XHR object
				this.xhr = new XMLHttpRequest();
				// set responseJSON property
				this.xhr.responseJSON = null;
				// make a users options object
				this.options = {};
				// set the url if provided
				if (url) this.options.url = url;
				// XHR library properties
				this.properties = {
					id: id(22),
					callbacks: {},
					aborted: false,
					locked: false,
					opened: false,
					resolved: undefined,
					rejected: undefined,
					path: "created"
				};
			},
			// class methods
			methods__: {
				/**
				 * @description [Adds URL to options object.]
				 * @param  {String} url [The URL.]
				 * @return {Undefined}     [Nothing is returned.]
				 */
				url: function(url) {
					// cache the object
					var _ = this;
					// option cannot be set if object has been opened
					if (_.properties.locked) return _;
					// set the option
					_.options.url = url;
					// return self to chain methods
					return _;
				},
				/**
				 * @description [Adds method to options object.]
				 * @param  {String} method [The request method.]
				 * @return {Undefined}     [Nothing is returned.]
				 */
				method: function(method) {
					// cache the object
					var _ = this;
					// option cannot be set if object has been opened
					if (_.properties.locked) return _;
					// set the option
					_.options.method = method;
					// return self to chain methods
					return _;
				},
				/**
				 * @description [Adds data to options object.]
				 * @param  {Any} data [The data to send request with.]
				 * @return {Undefined}     [Nothing is returned.]
				 */
				data: function(data) {
					// cache the object
					var _ = this;
					// option cannot be set if object has been opened
					if (_.properties.locked) return _;
					// set the option
					_.options.data = data;
					// return self to chain methods
					return _;
				},
				/**
				 * @description [Adds fileUpload flag to options object.
				 *               Flag indicates whether files are being uploaded.]
				 * @param  {Boolean} flag [Bool indicating whether to set flag.]
				 * @return {Undefined}     [Nothing is returned.]
				 */
				fileUpload: function(flag) {
					// cache the object
					var _ = this;
					// option cannot be set if object has been opened
					if (_.properties.locked) return _;
					// set the option
					_.options.fileUpload = flag;
					// return self to chain methods
					return _;
				},
				/**
				 * @description [Adds postJSON flag to options object.
				 *               Flag indicates whether data should be stringified.]
				 * @param  {Boolean} flag [Bool indicating whether to set flag.]
				 * @return {Undefined}     [Nothing is returned.]
				 */
				postJSON: function(flag) {
					// cache the object
					var _ = this;
					// option cannot be set if object has been opened
					if (_.properties.locked) return _;
					// set the option
					_.options.postJSON = flag;
					// return self to chain methods
					return _;
				},
				/**
				 * @description [Adds parseJSON flag to options object.
				 *               Flag indicates whether req response should be JSON parsed.]
				 * @param  {Boolean} flag [Bool indicating whether to set flag.]
				 * @return {Undefined}     [Nothing is returned.]
				 */
				parseJSON: function(flag) {
					// cache the object
					var _ = this;
					// option cannot be set if object has been opened
					if (_.properties.locked) return _;
					// set the option
					_.options.parseJSON = flag;
					// return self to chain methods
					return _;
				},
				/**
				 * @description [Adds cache flag to options object.
				 *               Flag indicates whether request needs to be cached.]
				 * @param  {Boolean} flag [Bool indicating whether to set flag.]
				 * @return {Undefined}     [Nothing is returned.]
				 */
				cache: function(flag) {
					// cache the object
					var _ = this;
					// option cannot be set if object has been opened
					if (_.properties.locked) return _;
					// set the option
					_.options.cache = flag;
					// return self to chain methods
					return _;
				},
				/**
				 * @description [Adds async flag to options object.
				 *               Flag indicates whether request is async.]
				 * @param  {Boolean} flag [Bool indicating whether to set flag.]
				 * @return {Undefined}     [Nothing is returned.]
				 */
				async: function(flag) {
					// cache the object
					var _ = this;
					// option cannot be set if object has been opened
					if (_.properties.locked) return _;
					// set the option
					_.options.async = flag;
					// return self to chain methods
					return _;
				},
				/**
				 * @description [Adds headers object to options object.]
				 * @param  {Object} key  [The header name.]
				 * @param  {Object} name [The header value.]
				 * @return {Undefined}     [Nothing is returned.]
				 */
				header: function(key, value) {
					// cache the object
					var _ = this;
					// option cannot be set if object has been opened
					if (_.properties.locked) return _;
					// add the option
					if (!_.options.headers) _.options.headers = [];
					// append provided header to the headers array
					_.options.headers.push([key, value]);
					// return self to chain methods
					return _;
				},
				/**
				 * @description [Adds processData flag to options object.
				 *               Flag indicates whether data needs to be processed.]
				 * @param  {Boolean} flag [Bool indicating whether to set flag.]
				 * @return {Undefined}     [Nothing is returned.]
				 */
				processData: function(flag) {
					// cache the object
					var _ = this;
					// option cannot be set if object has been opened
					if (_.properties.locked) return _;
					// set the option
					_.options.processData = flag;
					// return self to chain methods
					return _;
				},
				/**
				 * @description [Adds id to options object.]
				 * @param  {String} id [The id. Needs to be unique.]
				 * @return {Undefined}     [Nothing is returned.]
				 */
				id: function(id) {
					// cache the object
					var _ = this;
					// option cannot be set if object has been opened
					if (_.properties.locked) return _;
					// set the option
					_.options.id = id;
					// return self to chain methods
					return _;
				},
				/**
				 * @description [Adds withCredentials flag to options object.
				 *               Flag indicates whether prop needs to be set for request.]
				 * @param  {Boolean} flag [Bool indicating whether to set flag.]
				 * @return {Undefined}     [Nothing is returned.]
				 */
				withCredentials: function(flag) {
					// cache the object
					var _ = this;
					// option cannot be set if object has been opened
					if (_.properties.locked) return _;
					// set the option
					_.options.withCredentials = flag;
					// return self to chain methods
					return _;
				},
				/**
				 * @description [Adds the request response type.]
				 * @param  {Number} type [The response type..]
				 * @return {Undefined}     [Nothing is returned.]
				 */
				responseType: function(type) {
					// cache the object
					var _ = this;
					// option cannot be set if object has been opened
					if (_.properties.locked) return _;
					// set the option
					_.options.responseType = type;
					// return self to chain methods
					return _;
				},
				/**
				 * @description [Adds timeout time to options object.]
				 * @param  {Number} time [The time to timeout request after.]
				 * @return {Undefined}     [Nothing is returned.]
				 */
				timeout: function(time) {
					// cache the object
					var _ = this;
					// option cannot be set if object has been opened
					if (_.properties.locked) return _;
					// set the option
					_.options.timeout = time;
					// return self to chain methods
					return _;
				},
				/**
				 * @description [Adds events object to options object.]
				 * @param  {Object} events [The events object.]
				 * @return {Undefined}     [Nothing is returned.]
				 */
				events: function(events) {
					// cache the object
					var _ = this;
					// option cannot be set if object has been opened
					if (_.properties.locked) return _;
					// set the option
					_.options.events = events;
					// return self to chain methods
					return _;
				},
				/**
				 * @description [Works the XHR request by normalizing options,
				 *               applies event listeners, sets headers, processes
				 *               data, and sends the request.]
				 * @return {Promise}     [XHR request is wrapped in a promise.]
				 */
				run: function() {
					// cache the object
					var _ = this;
					// get the XHR object
					var xhr = _.xhr,
						// normalize the options
						options = normalize_options(_),
						properties = _.properties,
						callbacks = properties.callbacks;
					// option cannot be set if object has been opened
					if (properties.opened) return _;
					// get the options
					var url = options.url, // default: current URL location
						method = options.method, // default: GET
						data = options.data, // default: null
						// are files being uploaded? If true the content type is left out and left up to browser.
						// files = options.fileUpload,
						cache = options.cache, // default: true for GET requests
						async = options.async, // default: true
						// default: application/x-www-form-urlencoded;charset=UTF-8, empty for file uploads
						// content_type = options.contentType,
						// default: true for strings and objects containing key:value pairs
						process_data = options.processData,
						// {http://stackoverflow.com/questions/17785592/difference-between-json-stringify-and-json-parse}
						post_json = options.postJSON,
						parse_json = options.parseJSON,
						// {http://stackoverflow.com/a/38622545}
						id = options.id, // default: <random_alphanum_string> (used to abort request)
						credentials = options.credentials, // default: false
						response_type = options.responseType, // default: ""
						timeout = options.timeout, // default: 10 seconds
						headers = options.headers,
						events = options.events, // event handlers
						abort = events.abort,
						progress = events.progress,
						timeoutfn = events.timeout,
						readystatechange = events.readystatechange,
						loadstart = events.loadstart,
						loadend = events.loadend;
					// not used as a promise resolved/rejected functions are used
					// load = events.load,
					// error = events.error;
					// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState
					// 0   UNSENT  Client has been created. open() not called yet.
					// 1   OPENED  open() has been called.
					// 2   HEADERS_RECEIVED    send() has been called, and headers and status are available.
					// 3   LOADING Downloading; responseText holds partial data.
					// 4   DONE    The operation is complete.
					// xhr.readyState === 0 here
					// set the xhr path to unsent (init xhr)
					properties.path += ";unsent"; // http://stackoverflow.com/questions/21485545/is-there-a-way-to-tell-if-an-es6-promise-is-fulfilled-rejected-resolved
					// -------------------------
					// add xhr to pool
					xhrs[id] = _;
					// -------------------------
					// wrap XHR in a Promise
					return new Promise(function(resolve, reject) {
						// store callbacks in objects properties
						// this is done within the promise as the
						// resolve/reject functions are needed for
						// the load/error events
						callbacks.loadstart = loadstart;
						callbacks.loadend = loadend;
						callbacks.load = function(e) {
							// once finished resolve promise
							// set properties
							properties.path += ";done;resolved";
							properties.resolved = true;
							properties.rejected = false;
							// remove xhr callbacks
							remove_events(_);
							// check if user wants their response JSON parsed
							if (parse_json) {
								try {
									// {http://stackoverflow.com/questions/4467044/proper-way-to-catch-exception-from-javascript-method-json-parse}
									// parse the JSON and set result to XHR
									xhr.responseJSON = JSON.parse(
										xhr.responseText
									);
								} catch (error) {
									console.warn(error);
								}
							}
							resolve(xhr);
						};
						callbacks.error = function(e) {
							// reject on network errors
							// set properties
							properties.path += ";done;rejected";
							properties.resolved = false;
							properties.rejected = true;
							// remove xhr callbacks
							remove_events(_);
							// check internet connection here {https://davidwalsh.name/detecting-online}
							// http://www.html5rocks.com/en/tutorials/es6/promises/#toc-error-handling
							reject(xhr);
						};
						callbacks.progress = function(e) {
							if (e.lengthComputable) {
								var percent = e.loaded / e.total * 100;
								progress.call(xhr, e, percent);
							} else {
								// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest
								// Unable to compute progress information since the total size is unknown

								// Still call progress handler but set percent as null to help distingush whether
								// there was actual progress or not.
								// [https://stackoverflow.com/a/11848934]
								progress.call(xhr, e, null);
							}
						};
						callbacks.abort = function(e) {
							properties.path += ";aborted-callback";
							// remove xhr callbacks
							remove_events(_);
							// run the callback
							abort.call(xhr, e);
						};
						callbacks.timeout = function(e) {
							// reject on timeout
							properties.path += ";timedout";
							// reject the promise
							// check internet connection here {https://davidwalsh.name/detecting-online}
							// reject(xhr); // http://www.html5rocks.com/en/tutorials/es6/promises/#toc-error-handling
							// remove xhr callbacks
							remove_events(_);
							// run timeout callback if provided
							if (timeoutfn) timeoutfn.call(xhr, e);
							reject(new TypeError("Request timedout."));
						};
						callbacks.readystatechange = function(e) {
							var states = {
								"1": ";opened",
								"2": ";headers-received",
								"3": ";loading",
								"4": ";finished"
							};
							// append to the path according to the XHR ready state
							properties.path += states[xhr.readyState];
							// call handler if provided
							if (readystatechange) readystatechange.call(xhr, e);
						};
						// set the request timeout
						xhr.timeout = timeout;
						// add timestamp to prevent caching
						// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache
						if (!cache)
							url +=
								(url.indexOf("?") !== -1 ? "&_=" : "?_=") +
								new Date().getTime();
						// initialize request
						// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open
						xhr.open(method, url, async);
						// set request as opened
						properties.opened = true;
						// http://stackoverflow.com/questions/18701282/what-is-content-type-and-datatype-in-an-ajax-request
						// http://stackoverflow.com/questions/19694503/ajax-setrequestheader-content-type-application-x-www-form-urlencoded-and-ch
						// http://stackoverflow.com/questions/16819502/application-x-www-form-urlencoded-and-charset-utf-8
						// http://stackoverflow.com/questions/2053242/how-to-post-a-html-form-using-javascript-that-has-both-application-x-www-form-u
						// http://stackoverflow.com/questions/12348216/uploading-a-file-with-xmlhttprequest-missing-boundary-in-multipart-form-data
						// http://stackoverflow.com/questions/2436716/is-application-x-www-form-urlencoded-default-for-html-form
						// https://www.w3.org/TR/html401/interact/forms.html#h-17.13.4
						// https://developer.mozilla.org/en-US/docs/Web/API/FormData/Using_FormData_Objects -> FormData tutorial
						// for files use: multipart/form-data;charset=UTF-8, anything else: application/x-www-form-urlencoded;charset=UTF-8
						// headers list {https://en.wikipedia.org/wiki/List_of_HTTP_header_fields}
						for (var i = 0, l = headers.length; i < l; i++) {
							xhr.setRequestHeader(headers[i][0], headers[i][1]);
						}
						// if CORS is needed...
						// https://www.html5rocks.com/en/tutorials/cors/
						// https://developers.google.com/web/updates/2015/03/introduction-to-fetch#sending_credentials_with_a_fetch_request
						// https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials
						// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials
						// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
						xhr.withCredentials = credentials;
						// {https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType}
						// set the response type
						xhr.responseType = response_type;
						// fetch resources
						// https://davidwalsh.name/fetch
						// https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
						// https://developer.mozilla.org/en-US/docs/Web/API/Response
						// https://developer.mozilla.org/en-US/docs/Web/API/Request
						// https://developer.mozilla.org/en-US/docs/Web/API/Request/mode
						// https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials
						// process data if data is either a string or [object Object] and process_data is not set to false
						var data_type = dtype(data);
						if (
							process_data !== false &&
							(data_type === "string" || data_type === "object")
						) {
							// if data is a string we turn into an object
							if (typeof data === "string") {
								// breakdown and turn data into an object
								var parameters = data.split("&"),
									parsed_data = {};
								for (
									var i = 0, l = parameters.length;
									i < l;
									i++
								) {
									var parameter = parameters[i].split("=");
									parsed_data[parameter[0]] = parameter[1];
								}
								// reset data var
								data = parsed_data;
							}
							// else if already object just continue
							// now we escape special characters in parameters
							// http://stackoverflow.com/questions/75980/when-are-you-supposed-to-use-escape-instead-of-encodeuri-encodeuricomponent
							// http://stackoverflow.com/questions/4540753/should-i-use-encodeuri-or-encodeuricomponent-for-encoding-urls
							// http://stackoverflow.com/questions/15847882/how-to-send-raw-text-with-xmlhttp-request/39109184#39109184
							// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent
							var data_string = "",
								i = 0;
							for (var key in data) {
								if (data.hasOwnProperty(key)) {
									data_string +=
										(i !== 0 ? "&" : "") +
										encodeURIComponent(key) +
										"=" +
										encodeURIComponent(data[key]);
									i++;
								}
							}
							// reset data var
							data = data_string;
						}
						// else...data is of the following types and those do not get processed.
						// (new Int8Array(), new Blob(), new FormData(), document, null)
						// stringify object if post_json flag is set
						if (post_json) {
							try {
								data = JSON.stringify(data);
							} catch (error) {
								console.warn(error);
							}
						}
						// -------------------------
						// listen to when request starts and ends
						// http://stackoverflow.com/questions/6233927/microsecond-timing-in-javascript
						xhr.addEventListener(
							"loadstart",
							callbacks.loadstart,
							false
						);
						xhr.addEventListener(
							"loadend",
							callbacks.loadend,
							false
						);
						// listen to request state
						xhr.addEventListener(
							"progress",
							callbacks.progress,
							false
						);
						xhr.addEventListener("abort", callbacks.abort, false);
						// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout
						xhr.addEventListener(
							"timeout",
							callbacks.timeout,
							false
						);
						// http://stackoverflow.com/questions/14946291/can-one-replace-xhr-onreadystatechange-with-xhr-onload-for-ajax-calls
						// http://stackoverflow.com/questions/9181090/is-onload-equal-to-readystate-4-in-xmlhttprequest
						// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/onreadystatechange
						// readystatechange wont fire when canceled with abort() method
						xhr.addEventListener(
							"readystatechange",
							callbacks.readystatechange,
							false
						);
						// listen for request completion
						// http://stackoverflow.com/questions/6783053/xmlhttprequest-is-always-calling-load-event-listener-even-when-response-has-e/21025981#21025981
						xhr.addEventListener("load", callbacks.load, false);
						// **Note: user must handle HTTP request error response on their own.
						// this is really only invoked for network-level errors.
						xhr.addEventListener("error", callbacks.error, false);
						// -------------------------
						// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send
						// possible data types: null, new Int8Array(), new Blob(), document, 'string', & new FormData()
						xhr.send(data);
					});
				},
				/**
				 * @description [Returns the needed http object property.]
				 * @param  {String} property [The wanted property.]
				 * @return {String}     [The wanted property.]
				 */
				getProp: function(property) {
					// cache the object
					var _ = this,
						properties = _.properties;
					// a property must be provided
					// it must also be a string
					if (!property || !dtype(property, "string")) return;
					// property must exist
					if (
						!(property in properties) ||
						!properties.hasOwnProperty(property)
					)
						return;
					// return the property
					return properties[property];
				},
				abort: function() {
					// single xhr abort...
					abort(this);
				}
			},
			// class to extend
			extend__: false
		});
		// return library to add to global scope later...
		return Library;
	})();
	// =============================== Global Library Functions/Methods/Vars
	// keep track of requests
	var xhrs = {};
	// flag indicating whether the reqs have been
	// aborted on the beforunload/unload events
	var unloaded = false;
	/**
	 * @description [Aborts the provided http request object.]
	 * @param  {Object} _ [The http object to abort.]
	 * @return {Object}     [The http object.]
	 */
	function abort(_) {
		// get the XHR object
		var xhr = _.xhr,
			properties = _.properties;
		// check if already aborted, if so return
		if (properties.aborted) return xhr;
		// only abort if req is has not been resolved or rejected
		if (!properties.resolved && !properties.rejected) {
			// abort the request
			xhr.abort();
			// set aborted property to true
			properties.aborted = true;
			// update the path
			properties.path += ";aborted";
			delete xhrs[properties.id]; // remove xhr from pool
		} // else the req was already aborted
		return xhr; // return the xhr
	}
	/**
	 * @description [Global library abort method. Aborts all requests.]
	 * @return {Undefined}     [Nothing is returned.]
	 * @concept {http://stackoverflow.com/questions/32497035/abort-ajax-request-in-a-promise}
	 */
	library.abortAll = function() {
		// loop over xhrs
		for (var id in xhrs) {
			if (xhrs.hasOwnProperty(id)) {
				// abort the xhr
				abort(xhrs[id]);
			}
		}
	};
	/**
	 * @description [Unload event handler. Aborts all requests when the
	 *               page is unloaded (refreshed, tab closed).]
	 * @param  {Object} event [The event object.]
	 * @return {Undefined}     [Nothing is returned.]
	 */
	function unload(e) {
		// http://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-problem-with-chrome
		// http://stackoverflow.com/questions/6895564/difference-between-onbeforeunload-and-onunload
		// prevent double execution of function
		if (unloaded) return;
		// abort all requests
		library.abortAll();
		// check if xhr pool is empty
		if (!Object.keys(xhrs).length) {
			// set flag to true
			unloaded = true;
			// remove the event listeners
			window.removeEventListener("beforeunload", unload, false);
			window.removeEventListener("unload", unload, false);
		}
	}
	// set unload listeners
	window.addEventListener("beforeunload", unload, false);
	window.addEventListener("unload", unload, false);
	// =============================== Attach Library To Global Scope
	// add to global scope for ease of use
	// use global app var or create it if not present
	var app = window.app || (window.app = {});
	// get the libs object from within the app object
	// if it does not exist create it
	var libs = app.libs || (app.libs = {});
	// add the library to the libs object
	libs.http = library;
	// IIFE end
})(window);

;(function () {
	'use strict';

	/**
	 * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
	 *
	 * @codingstandard ftlabs-jsv2
	 * @copyright The Financial Times Limited [All Rights Reserved]
	 * @license MIT License (see LICENSE.txt)
	 */

	/*jslint browser:true, node:true*/
	/*global define, Event, Node*/


	/**
	 * Instantiate fast-clicking listeners on the specified layer.
	 *
	 * @constructor
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
	function FastClick(layer, options) {
		var oldOnClick;

		options = options || {};

		/**
		 * Whether a click is currently being tracked.
		 *
		 * @type boolean
		 */
		this.trackingClick = false;


		/**
		 * Timestamp for when click tracking started.
		 *
		 * @type number
		 */
		this.trackingClickStart = 0;


		/**
		 * The element being tracked for a click.
		 *
		 * @type EventTarget
		 */
		this.targetElement = null;


		/**
		 * X-coordinate of touch start event.
		 *
		 * @type number
		 */
		this.touchStartX = 0;


		/**
		 * Y-coordinate of touch start event.
		 *
		 * @type number
		 */
		this.touchStartY = 0;


		/**
		 * ID of the last touch, retrieved from Touch.identifier.
		 *
		 * @type number
		 */
		this.lastTouchIdentifier = 0;


		/**
		 * Touchmove boundary, beyond which a click will be cancelled.
		 *
		 * @type number
		 */
		this.touchBoundary = options.touchBoundary || 10;


		/**
		 * The FastClick layer.
		 *
		 * @type Element
		 */
		this.layer = layer;

		/**
		 * The minimum time between tap(touchstart and touchend) events
		 *
		 * @type number
		 */
		this.tapDelay = options.tapDelay || 200;

		/**
		 * The maximum time for a tap
		 *
		 * @type number
		 */
		this.tapTimeout = options.tapTimeout || 700;

		if (FastClick.notNeeded(layer)) {
			return;
		}

		// Some old versions of Android don't have Function.prototype.bind
		function bind(method, context) {
			return function() { return method.apply(context, arguments); };
		}


		var methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];
		var context = this;
		for (var i = 0, l = methods.length; i < l; i++) {
			context[methods[i]] = bind(context[methods[i]], context);
		}

		// Set up event handlers as required
		if (deviceIsAndroid) {
			layer.addEventListener('mouseover', this.onMouse, true);
			layer.addEventListener('mousedown', this.onMouse, true);
			layer.addEventListener('mouseup', this.onMouse, true);
		}

		layer.addEventListener('click', this.onClick, true);
		layer.addEventListener('touchstart', this.onTouchStart, false);
		layer.addEventListener('touchmove', this.onTouchMove, false);
		layer.addEventListener('touchend', this.onTouchEnd, false);
		layer.addEventListener('touchcancel', this.onTouchCancel, false);

		// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
		// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
		// layer when they are cancelled.
		if (!Event.prototype.stopImmediatePropagation) {
			layer.removeEventListener = function(type, callback, capture) {
				var rmv = Node.prototype.removeEventListener;
				if (type === 'click') {
					rmv.call(layer, type, callback.hijacked || callback, capture);
				} else {
					rmv.call(layer, type, callback, capture);
				}
			};

			layer.addEventListener = function(type, callback, capture) {
				var adv = Node.prototype.addEventListener;
				if (type === 'click') {
					adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
						if (!event.propagationStopped) {
							callback(event);
						}
					}), capture);
				} else {
					adv.call(layer, type, callback, capture);
				}
			};
		}

		// If a handler is already declared in the element's onclick attribute, it will be fired before
		// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
		// adding it as listener.
		if (typeof layer.onclick === 'function') {

			// Android browser on at least 3.2 requires a new reference to the function in layer.onclick
			// - the old one won't work if passed to addEventListener directly.
			oldOnClick = layer.onclick;
			layer.addEventListener('click', function(event) {
				oldOnClick(event);
			}, false);
			layer.onclick = null;
		}
	}

	/**
	* Windows Phone 8.1 fakes user agent string to look like Android and iPhone.
	*
	* @type boolean
	*/
	var deviceIsWindowsPhone = navigator.userAgent.indexOf("Windows Phone") >= 0;

	/**
	 * Android requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;


	/**
	 * iOS requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;


	/**
	 * iOS 4 requires an exception for select elements.
	 *
	 * @type boolean
	 */
	var deviceIsIOS4 = deviceIsIOS && (/OS 4_\d(_\d)?/).test(navigator.userAgent);


	/**
	 * iOS 6.0-7.* requires the target element to be manually derived
	 *
	 * @type boolean
	 */
	var deviceIsIOSWithBadTarget = deviceIsIOS && (/OS [6-7]_\d/).test(navigator.userAgent);

	/**
	 * BlackBerry requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;

	/**
	 * Determine whether a given element requires a native click.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element needs a native click
	 */
	FastClick.prototype.needsClick = function(target) {
		switch (target.nodeName.toLowerCase()) {

		// Don't send a synthetic click to disabled inputs (issue #62)
		case 'button':
		case 'select':
		case 'textarea':
			if (target.disabled) {
				return true;
			}

			break;
		case 'input':

			// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
			if ((deviceIsIOS && target.type === 'file') || target.disabled) {
				return true;
			}

			break;
		case 'label':
		case 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames
		case 'video':
			return true;
		}

		return (/\bneedsclick\b/).test(target.className);
	};


	/**
	 * Determine whether a given element requires a call to focus to simulate click into element.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
	 */
	FastClick.prototype.needsFocus = function(target) {
		switch (target.nodeName.toLowerCase()) {
		case 'textarea':
			return true;
		case 'select':
			return !deviceIsAndroid;
		case 'input':
			switch (target.type) {
			case 'button':
			case 'checkbox':
			case 'file':
			case 'image':
			case 'radio':
			case 'submit':
				return false;
			}

			// No point in attempting to focus disabled inputs
			return !target.disabled && !target.readOnly;
		default:
			return (/\bneedsfocus\b/).test(target.className);
		}
	};


	/**
	 * Send a click event to the specified element.
	 *
	 * @param {EventTarget|Element} targetElement
	 * @param {Event} event
	 */
	FastClick.prototype.sendClick = function(targetElement, event) {
		var clickEvent, touch;

		// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
		if (document.activeElement && document.activeElement !== targetElement) {
			document.activeElement.blur();
		}

		touch = event.changedTouches[0];

		// Synthesise a click event, with an extra attribute so it can be tracked
		clickEvent = document.createEvent('MouseEvents');
		clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
		clickEvent.forwardedTouchEvent = true;
		targetElement.dispatchEvent(clickEvent);
	};

	FastClick.prototype.determineEventType = function(targetElement) {

		//Issue #159: Android Chrome Select Box does not open with a synthetic click event
		if (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
			return 'mousedown';
		}

		return 'click';
	};


	/**
	 * @param {EventTarget|Element} targetElement
	 */
	FastClick.prototype.focus = function(targetElement) {
		var length;

		// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
		if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {
			length = targetElement.value.length;
			targetElement.setSelectionRange(length, length);
		} else {
			targetElement.focus();
		}
	};


	/**
	 * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
	 *
	 * @param {EventTarget|Element} targetElement
	 */
	FastClick.prototype.updateScrollParent = function(targetElement) {
		var scrollParent, parentElement;

		scrollParent = targetElement.fastClickScrollParent;

		// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
		// target element was moved to another parent.
		if (!scrollParent || !scrollParent.contains(targetElement)) {
			parentElement = targetElement;
			do {
				if (parentElement.scrollHeight > parentElement.offsetHeight) {
					scrollParent = parentElement;
					targetElement.fastClickScrollParent = parentElement;
					break;
				}

				parentElement = parentElement.parentElement;
			} while (parentElement);
		}

		// Always update the scroll top tracker if possible.
		if (scrollParent) {
			scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
		}
	};


	/**
	 * @param {EventTarget} targetElement
	 * @returns {Element|EventTarget}
	 */
	FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {

		// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
		if (eventTarget.nodeType === Node.TEXT_NODE) {
			return eventTarget.parentNode;
		}

		return eventTarget;
	};


	/**
	 * On touch start, record the position and scroll offset.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchStart = function(event) {
		var targetElement, touch, selection;

		// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
		if (event.targetTouches.length > 1) {
			return true;
		}

		targetElement = this.getTargetElementFromEventTarget(event.target);
		touch = event.targetTouches[0];

		if (deviceIsIOS) {

			// Only trusted events will deselect text on iOS (issue #49)
			selection = window.getSelection();
			if (selection.rangeCount && !selection.isCollapsed) {
				return true;
			}

			if (!deviceIsIOS4) {

				// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
				// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
				// with the same identifier as the touch event that previously triggered the click that triggered the alert.
				// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
				// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
				// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,
				// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,
				// random integers, it's safe to to continue if the identifier is 0 here.
				if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
					event.preventDefault();
					return false;
				}

				this.lastTouchIdentifier = touch.identifier;

				// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
				// 1) the user does a fling scroll on the scrollable layer
				// 2) the user stops the fling scroll with another tap
				// then the event.target of the last 'touchend' event will be the element that was under the user's finger
				// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
				// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
				this.updateScrollParent(targetElement);
			}
		}

		this.trackingClick = true;
		this.trackingClickStart = event.timeStamp;
		this.targetElement = targetElement;

		this.touchStartX = touch.pageX;
		this.touchStartY = touch.pageY;

		// Prevent phantom clicks on fast double-tap (issue #36)
		if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
			event.preventDefault();
		}

		return true;
	};


	/**
	 * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.touchHasMoved = function(event) {
		var touch = event.changedTouches[0], boundary = this.touchBoundary;

		if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
			return true;
		}

		return false;
	};


	/**
	 * Update the last position.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchMove = function(event) {
		if (!this.trackingClick) {
			return true;
		}

		// If the touch has moved, cancel the click tracking
		if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
			this.trackingClick = false;
			this.targetElement = null;
		}

		return true;
	};


	/**
	 * Attempt to find the labelled control for the given label element.
	 *
	 * @param {EventTarget|HTMLLabelElement} labelElement
	 * @returns {Element|null}
	 */
	FastClick.prototype.findControl = function(labelElement) {

		// Fast path for newer browsers supporting the HTML5 control attribute
		if (labelElement.control !== undefined) {
			return labelElement.control;
		}

		// All browsers under test that support touch events also support the HTML5 htmlFor attribute
		if (labelElement.htmlFor) {
			return document.getElementById(labelElement.htmlFor);
		}

		// If no for attribute exists, attempt to retrieve the first labellable descendant element
		// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label
		return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
	};


	/**
	 * On touch end, determine whether to send a click event at once.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchEnd = function(event) {
		var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;

		if (!this.trackingClick) {
			return true;
		}

		// Prevent phantom clicks on fast double-tap (issue #36)
		if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
			this.cancelNextClick = true;
			return true;
		}

		if ((event.timeStamp - this.trackingClickStart) > this.tapTimeout) {
			return true;
		}

		// Reset to prevent wrong click cancel on input (issue #156).
		this.cancelNextClick = false;

		this.lastClickTime = event.timeStamp;

		trackingClickStart = this.trackingClickStart;
		this.trackingClick = false;
		this.trackingClickStart = 0;

		// On some iOS devices, the targetElement supplied with the event is invalid if the layer
		// is performing a transition or scroll, and has to be re-detected manually. Note that
		// for this to function correctly, it must be called *after* the event target is checked!
		// See issue #57; also filed as rdar://13048589 .
		if (deviceIsIOSWithBadTarget) {
			touch = event.changedTouches[0];

			// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
			targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
			targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
		}

		targetTagName = targetElement.tagName.toLowerCase();
		if (targetTagName === 'label') {
			forElement = this.findControl(targetElement);
			if (forElement) {
				this.focus(targetElement);
				if (deviceIsAndroid) {
					return false;
				}

				targetElement = forElement;
			}
		} else if (this.needsFocus(targetElement)) {

			// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
			// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
			if ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {
				this.targetElement = null;
				return false;
			}

			this.focus(targetElement);
			this.sendClick(targetElement, event);

			// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
			// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)
			if (!deviceIsIOS || targetTagName !== 'select') {
				this.targetElement = null;
				event.preventDefault();
			}

			return false;
		}

		if (deviceIsIOS && !deviceIsIOS4) {

			// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
			// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
			scrollParent = targetElement.fastClickScrollParent;
			if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
				return true;
			}
		}

		// Prevent the actual click from going though - unless the target node is marked as requiring
		// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
		if (!this.needsClick(targetElement)) {
			event.preventDefault();
			this.sendClick(targetElement, event);
		}

		return false;
	};


	/**
	 * On touch cancel, stop tracking the click.
	 *
	 * @returns {void}
	 */
	FastClick.prototype.onTouchCancel = function() {
		this.trackingClick = false;
		this.targetElement = null;
	};


	/**
	 * Determine mouse events which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onMouse = function(event) {

		// If a target element was never set (because a touch event was never fired) allow the event
		if (!this.targetElement) {
			return true;
		}

		if (event.forwardedTouchEvent) {
			return true;
		}

		// Programmatically generated events targeting a specific element should be permitted
		if (!event.cancelable) {
			return true;
		}

		// Derive and check the target element to see whether the mouse event needs to be permitted;
		// unless explicitly enabled, prevent non-touch click events from triggering actions,
		// to prevent ghost/doubleclicks.
		if (!this.needsClick(this.targetElement) || this.cancelNextClick) {

			// Prevent any user-added listeners declared on FastClick element from being fired.
			if (event.stopImmediatePropagation) {
				event.stopImmediatePropagation();
			} else {

				// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
				event.propagationStopped = true;
			}

			// Cancel the event
			event.stopPropagation();
			event.preventDefault();

			return false;
		}

		// If the mouse event is permitted, return true for the action to go through.
		return true;
	};


	/**
	 * On actual clicks, determine whether this is a touch-generated click, a click action occurring
	 * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
	 * an actual click which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onClick = function(event) {
		var permitted;

		// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
		if (this.trackingClick) {
			this.targetElement = null;
			this.trackingClick = false;
			return true;
		}

		// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
		if (event.target.type === 'submit' && event.detail === 0) {
			return true;
		}

		permitted = this.onMouse(event);

		// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
		if (!permitted) {
			this.targetElement = null;
		}

		// If clicks are permitted, return true for the action to go through.
		return permitted;
	};


	/**
	 * Remove all FastClick's event listeners.
	 *
	 * @returns {void}
	 */
	FastClick.prototype.destroy = function() {
		var layer = this.layer;

		if (deviceIsAndroid) {
			layer.removeEventListener('mouseover', this.onMouse, true);
			layer.removeEventListener('mousedown', this.onMouse, true);
			layer.removeEventListener('mouseup', this.onMouse, true);
		}

		layer.removeEventListener('click', this.onClick, true);
		layer.removeEventListener('touchstart', this.onTouchStart, false);
		layer.removeEventListener('touchmove', this.onTouchMove, false);
		layer.removeEventListener('touchend', this.onTouchEnd, false);
		layer.removeEventListener('touchcancel', this.onTouchCancel, false);
	};


	/**
	 * Check whether FastClick is needed.
	 *
	 * @param {Element} layer The layer to listen on
	 */
	FastClick.notNeeded = function(layer) {
		var metaViewport;
		var chromeVersion;
		var blackberryVersion;
		var firefoxVersion;

		// Devices that don't support touch don't need FastClick
		if (typeof window.ontouchstart === 'undefined') {
			return true;
		}

		// Chrome version - zero for other browsers
		chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

		if (chromeVersion) {

			if (deviceIsAndroid) {
				metaViewport = document.querySelector('meta[name=viewport]');

				if (metaViewport) {
					// Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
					if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
						return true;
					}
					// Chrome 32 and above with width=device-width or less don't need FastClick
					if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
						return true;
					}
				}

			// Chrome desktop doesn't need FastClick (issue #15)
			} else {
				return true;
			}
		}

		if (deviceIsBlackBerry10) {
			blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);

			// BlackBerry 10.3+ does not require Fastclick library.
			// https://github.com/ftlabs/fastclick/issues/251
			if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
				metaViewport = document.querySelector('meta[name=viewport]');

				if (metaViewport) {
					// user-scalable=no eliminates click delay.
					if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
						return true;
					}
					// width=device-width (or less than device-width) eliminates click delay.
					if (document.documentElement.scrollWidth <= window.outerWidth) {
						return true;
					}
				}
			}
		}

		// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)
		if (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {
			return true;
		}

		// Firefox version - zero for other browsers
		firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

		if (firefoxVersion >= 27) {
			// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896

			metaViewport = document.querySelector('meta[name=viewport]');
			if (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
				return true;
			}
		}

		// IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version
		// http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx
		if (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {
			return true;
		}

		return false;
	};


	/**
	 * Factory method for creating a FastClick object
	 *
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
	FastClick.attach = function(layer, options) {
		return new FastClick(layer, options);
	};


	if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {

		// AMD. Register as an anonymous module.
		define(function() {
			return FastClick;
		});
	} else if (typeof module !== 'undefined' && module.exports) {
		module.exports = FastClick.attach;
		module.exports.FastClick = FastClick;
	} else {
		window.FastClick = FastClick;
	}
}());

/*!
 * UAParser.js v0.7.18
 * Lightweight JavaScript-based User-Agent string parser
 * https://github.com/faisalman/ua-parser-js
 *
 * Copyright © 2012-2016 Faisal Salman <fyzlman@gmail.com>
 * Dual licensed under GPLv2 or MIT
 */
(function(window, undefined) {
	"use strict";
	var LIBVERSION = "0.7.18",
		EMPTY = "",
		UNKNOWN = "?",
		FUNC_TYPE = "function",
		UNDEF_TYPE = "undefined",
		OBJ_TYPE = "object",
		STR_TYPE = "string",
		MAJOR = "major",
		MODEL = "model",
		NAME = "name",
		TYPE = "type",
		VENDOR = "vendor",
		VERSION = "version",
		ARCHITECTURE = "architecture",
		CONSOLE = "console",
		MOBILE = "mobile",
		TABLET = "tablet",
		SMARTTV = "smarttv",
		WEARABLE = "wearable",
		EMBEDDED = "embedded";
	var util = {
		extend: function(regexes, extensions) {
			var margedRegexes = {};
			for (var i in regexes) {
				if (extensions[i] && extensions[i].length % 2 === 0) {
					margedRegexes[i] = extensions[i].concat(regexes[i]);
				} else {
					margedRegexes[i] = regexes[i];
				}
			}
			return margedRegexes;
		},
		has: function(str1, str2) {
			if (typeof str1 === "string") {
				return str2.toLowerCase().indexOf(str1.toLowerCase()) !== -1;
			} else {
				return false;
			}
		},
		lowerize: function(str) {
			return str.toLowerCase();
		},
		major: function(version) {
			return typeof version === STR_TYPE
				? version.replace(/[^\d\.]/g, "").split(".")[0]
				: undefined;
		},
		trim: function(str) {
			return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
		}
	};
	var mapper = {
		rgx: function(ua, arrays) {
			var i = 0,
				j,
				k,
				p,
				q,
				matches,
				match;
			while (i < arrays.length && !matches) {
				var regex = arrays[i],
					props = arrays[i + 1];
				j = k = 0;
				while (j < regex.length && !matches) {
					matches = regex[j++].exec(ua);
					if (!!matches) {
						for (p = 0; p < props.length; p++) {
							match = matches[++k];
							q = props[p];
							if (typeof q === OBJ_TYPE && q.length > 0) {
								if (q.length == 2) {
									if (typeof q[1] == FUNC_TYPE) {
										this[q[0]] = q[1].call(this, match);
									} else {
										this[q[0]] = q[1];
									}
								} else if (q.length == 3) {
									if (
										typeof q[1] === FUNC_TYPE &&
										!(q[1].exec && q[1].test)
									) {
										this[q[0]] = match
											? q[1].call(this, match, q[2])
											: undefined;
									} else {
										this[q[0]] = match
											? match.replace(q[1], q[2])
											: undefined;
									}
								} else if (q.length == 4) {
									this[q[0]] = match
										? q[3].call(
												this,
												match.replace(q[1], q[2])
											)
										: undefined;
								}
							} else {
								this[q] = match ? match : undefined;
							}
						}
					}
				}
				i += 2;
			}
		},
		str: function(str, map) {
			for (var i in map) {
				if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
					for (var j = 0; j < map[i].length; j++) {
						if (util.has(map[i][j], str)) {
							return i === UNKNOWN ? undefined : i;
						}
					}
				} else if (util.has(map[i], str)) {
					return i === UNKNOWN ? undefined : i;
				}
			}
			return str;
		}
	};
	var maps = {
		browser: {
			oldsafari: {
				version: {
					"1.0": "/8",
					1.2: "/1",
					1.3: "/3",
					"2.0": "/412",
					"2.0.2": "/416",
					"2.0.3": "/417",
					"2.0.4": "/419",
					"?": "/"
				}
			}
		},
		device: {
			amazon: { model: { "Fire Phone": ["SD", "KF"] } },
			sprint: {
				model: { "Evo Shift 4G": "7373KT" },
				vendor: { HTC: "APA", Sprint: "Sprint" }
			}
		},
		os: {
			windows: {
				version: {
					ME: "4.90",
					"NT 3.11": "NT3.51",
					"NT 4.0": "NT4.0",
					2000: "NT 5.0",
					XP: ["NT 5.1", "NT 5.2"],
					Vista: "NT 6.0",
					7: "NT 6.1",
					8: "NT 6.2",
					8.1: "NT 6.3",
					10: ["NT 6.4", "NT 10.0"],
					RT: "ARM"
				}
			}
		}
	};
	var regexes = {
		browser: [
			[
				/(opera\smini)\/([\w\.-]+)/i,
				/(opera\s[mobiletab]+).+version\/([\w\.-]+)/i,
				/(opera).+version\/([\w\.]+)/i,
				/(opera)[\/\s]+([\w\.]+)/i
			],
			[NAME, VERSION],
			[/(opios)[\/\s]+([\w\.]+)/i],
			[[NAME, "Opera Mini"], VERSION],
			[/\s(opr)\/([\w\.]+)/i],
			[[NAME, "Opera"], VERSION],
			[
				/(kindle)\/([\w\.]+)/i,
				/(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]*)/i,
				/(avant\s|iemobile|slim|baidu)(?:browser)?[\/\s]?([\w\.]*)/i,
				/(?:ms|\()(ie)\s([\w\.]+)/i,
				/(rekonq)\/([\w\.]*)/i,
				/(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark)\/([\w\.-]+)/i
			],
			[NAME, VERSION],
			[/(trident).+rv[:\s]([\w\.]+).+like\sgecko/i],
			[[NAME, "IE"], VERSION],
			[/(edge|edgios|edgea)\/((\d+)?[\w\.]+)/i],
			[[NAME, "Edge"], VERSION],
			[/(yabrowser)\/([\w\.]+)/i],
			[[NAME, "Yandex"], VERSION],
			[/(puffin)\/([\w\.]+)/i],
			[[NAME, "Puffin"], VERSION],
			[/((?:[\s\/])uc?\s?browser|(?:juc.+)ucweb)[\/\s]?([\w\.]+)/i],
			[[NAME, "UCBrowser"], VERSION],
			[/(comodo_dragon)\/([\w\.]+)/i],
			[[NAME, /_/g, " "], VERSION],
			[/(micromessenger)\/([\w\.]+)/i],
			[[NAME, "WeChat"], VERSION],
			[/(qqbrowserlite)\/([\w\.]+)/i],
			[NAME, VERSION],
			[/(QQ)\/([\d\.]+)/i],
			[NAME, VERSION],
			[/m?(qqbrowser)[\/\s]?([\w\.]+)/i],
			[NAME, VERSION],
			[/(BIDUBrowser)[\/\s]?([\w\.]+)/i],
			[NAME, VERSION],
			[/(2345Explorer)[\/\s]?([\w\.]+)/i],
			[NAME, VERSION],
			[/(MetaSr)[\/\s]?([\w\.]+)/i],
			[NAME],
			[/(LBBROWSER)/i],
			[NAME],
			[/xiaomi\/miuibrowser\/([\w\.]+)/i],
			[VERSION, [NAME, "MIUI Browser"]],
			[/;fbav\/([\w\.]+);/i],
			[VERSION, [NAME, "Facebook"]],
			[/headlesschrome(?:\/([\w\.]+)|\s)/i],
			[VERSION, [NAME, "Chrome Headless"]],
			[/\swv\).+(chrome)\/([\w\.]+)/i],
			[[NAME, /(.+)/, "$1 WebView"], VERSION],
			[/((?:oculus|samsung)browser)\/([\w\.]+)/i],
			[[NAME, /(.+(?:g|us))(.+)/, "$1 $2"], VERSION],
			[/android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)*/i],
			[VERSION, [NAME, "Android Browser"]],
			[/(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i],
			[NAME, VERSION],
			[/(dolfin)\/([\w\.]+)/i],
			[[NAME, "Dolphin"], VERSION],
			[/((?:android.+)crmo|crios)\/([\w\.]+)/i],
			[[NAME, "Chrome"], VERSION],
			[/(coast)\/([\w\.]+)/i],
			[[NAME, "Opera Coast"], VERSION],
			[/fxios\/([\w\.-]+)/i],
			[VERSION, [NAME, "Firefox"]],
			[/version\/([\w\.]+).+?mobile\/\w+\s(safari)/i],
			[VERSION, [NAME, "Mobile Safari"]],
			[/version\/([\w\.]+).+?(mobile\s?safari|safari)/i],
			[VERSION, NAME],
			[
				/webkit.+?(gsa)\/([\w\.]+).+?(mobile\s?safari|safari)(\/[\w\.]+)/i
			],
			[[NAME, "GSA"], VERSION],
			[/webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i],
			[NAME, [VERSION, mapper.str, maps.browser.oldsafari.version]],
			[/(konqueror)\/([\w\.]+)/i, /(webkit|khtml)\/([\w\.]+)/i],
			[NAME, VERSION],
			[/(navigator|netscape)\/([\w\.-]+)/i],
			[[NAME, "Netscape"], VERSION],
			[
				/(swiftfox)/i,
				/(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i,
				/(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([\w\.-]+)$/i,
				/(mozilla)\/([\w\.]+).+rv\:.+gecko\/\d+/i,
				/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i,
				/(links)\s\(([\w\.]+)/i,
				/(gobrowser)\/?([\w\.]*)/i,
				/(ice\s?browser)\/v?([\w\._]+)/i,
				/(mosaic)[\/\s]([\w\.]+)/i
			],
			[NAME, VERSION]
		],
		cpu: [
			[/(?:(amd|x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i],
			[[ARCHITECTURE, "amd64"]],
			[/(ia32(?=;))/i],
			[[ARCHITECTURE, util.lowerize]],
			[/((?:i[346]|x)86)[;\)]/i],
			[[ARCHITECTURE, "ia32"]],
			[/windows\s(ce|mobile);\sppc;/i],
			[[ARCHITECTURE, "arm"]],
			[/((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i],
			[[ARCHITECTURE, /ower/, "", util.lowerize]],
			[/(sun4\w)[;\)]/i],
			[[ARCHITECTURE, "sparc"]],
			[
				/((?:avr32|ia64(?=;))|68k(?=\))|arm(?:64|(?=v\d+;))|(?=atmel\s)avr|(?:irix|mips|sparc)(?:64)?(?=;)|pa-risc)/i
			],
			[[ARCHITECTURE, util.lowerize]]
		],
		device: [
			[/\((ipad|playbook);[\w\s\);-]+(rim|apple)/i],
			[MODEL, VENDOR, [TYPE, TABLET]],
			[/applecoremedia\/[\w\.]+ \((ipad)/],
			[MODEL, [VENDOR, "Apple"], [TYPE, TABLET]],
			[/(apple\s{0,1}tv)/i],
			[[MODEL, "Apple TV"], [VENDOR, "Apple"]],
			[
				/(archos)\s(gamepad2?)/i,
				/(hp).+(touchpad)/i,
				/(hp).+(tablet)/i,
				/(kindle)\/([\w\.]+)/i,
				/\s(nook)[\w\s]+build\/(\w+)/i,
				/(dell)\s(strea[kpr\s\d]*[\dko])/i
			],
			[VENDOR, MODEL, [TYPE, TABLET]],
			[/(kf[A-z]+)\sbuild\/.+silk\//i],
			[MODEL, [VENDOR, "Amazon"], [TYPE, TABLET]],
			[/(sd|kf)[0349hijorstuw]+\sbuild\/.+silk\//i],
			[
				[MODEL, mapper.str, maps.device.amazon.model],
				[VENDOR, "Amazon"],
				[TYPE, MOBILE]
			],
			[/\((ip[honed|\s\w*]+);.+(apple)/i],
			[MODEL, VENDOR, [TYPE, MOBILE]],
			[/\((ip[honed|\s\w*]+);/i],
			[MODEL, [VENDOR, "Apple"], [TYPE, MOBILE]],
			[
				/(blackberry)[\s-]?(\w+)/i,
				/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[\s_-]?([\w-]*)/i,
				/(hp)\s([\w\s]+\w)/i,
				/(asus)-?(\w+)/i
			],
			[VENDOR, MODEL, [TYPE, MOBILE]],
			[/\(bb10;\s(\w+)/i],
			[MODEL, [VENDOR, "BlackBerry"], [TYPE, MOBILE]],
			[
				/android.+(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus 7|padfone)/i
			],
			[MODEL, [VENDOR, "Asus"], [TYPE, TABLET]],
			[/(sony)\s(tablet\s[ps])\sbuild\//i, /(sony)?(?:sgp.+)\sbuild\//i],
			[[VENDOR, "Sony"], [MODEL, "Xperia Tablet"], [TYPE, TABLET]],
			[/android.+\s([c-g]\d{4}|so[-l]\w+)\sbuild\//i],
			[MODEL, [VENDOR, "Sony"], [TYPE, MOBILE]],
			[/\s(ouya)\s/i, /(nintendo)\s([wids3u]+)/i],
			[VENDOR, MODEL, [TYPE, CONSOLE]],
			[/android.+;\s(shield)\sbuild/i],
			[MODEL, [VENDOR, "Nvidia"], [TYPE, CONSOLE]],
			[/(playstation\s[34portablevi]+)/i],
			[MODEL, [VENDOR, "Sony"], [TYPE, CONSOLE]],
			[/(sprint\s(\w+))/i],
			[
				[VENDOR, mapper.str, maps.device.sprint.vendor],
				[MODEL, mapper.str, maps.device.sprint.model],
				[TYPE, MOBILE]
			],
			[/(lenovo)\s?(S(?:5000|6000)+(?:[-][\w+]))/i],
			[VENDOR, MODEL, [TYPE, TABLET]],
			[
				/(htc)[;_\s-]+([\w\s]+(?=\))|\w+)*/i,
				/(zte)-(\w*)/i,
				/(alcatel|geeksphone|lenovo|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]*)/i
			],
			[VENDOR, [MODEL, /_/g, " "], [TYPE, MOBILE]],
			[/(nexus\s9)/i],
			[MODEL, [VENDOR, "HTC"], [TYPE, TABLET]],
			[/d\/huawei([\w\s-]+)[;\)]/i, /(nexus\s6p)/i],
			[MODEL, [VENDOR, "Huawei"], [TYPE, MOBILE]],
			[/(microsoft);\s(lumia[\s\w]+)/i],
			[VENDOR, MODEL, [TYPE, MOBILE]],
			[/[\s\(;](xbox(?:\sone)?)[\s\);]/i],
			[MODEL, [VENDOR, "Microsoft"], [TYPE, CONSOLE]],
			[/(kin\.[onetw]{3})/i],
			[[MODEL, /\./g, " "], [VENDOR, "Microsoft"], [TYPE, MOBILE]],
			[
				/\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?:?(\s4g)?)[\w\s]+build\//i,
				/mot[\s-]?(\w*)/i,
				/(XT\d{3,4}) build\//i,
				/(nexus\s6)/i
			],
			[MODEL, [VENDOR, "Motorola"], [TYPE, MOBILE]],
			[/android.+\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i],
			[MODEL, [VENDOR, "Motorola"], [TYPE, TABLET]],
			[/hbbtv\/\d+\.\d+\.\d+\s+\([\w\s]*;\s*(\w[^;]*);([^;]*)/i],
			[[VENDOR, util.trim], [MODEL, util.trim], [TYPE, SMARTTV]],
			[/hbbtv.+maple;(\d+)/i],
			[[MODEL, /^/, "SmartTV"], [VENDOR, "Samsung"], [TYPE, SMARTTV]],
			[/\(dtv[\);].+(aquos)/i],
			[MODEL, [VENDOR, "Sharp"], [TYPE, SMARTTV]],
			[
				/android.+((sch-i[89]0\d|shw-m380s|gt-p\d{4}|gt-n\d+|sgh-t8[56]9|nexus 10))/i,
				/((SM-T\w+))/i
			],
			[[VENDOR, "Samsung"], MODEL, [TYPE, TABLET]],
			[/smart-tv.+(samsung)/i],
			[VENDOR, [TYPE, SMARTTV], MODEL],
			[
				/((s[cgp]h-\w+|gt-\w+|galaxy\snexus|sm-\w[\w\d]+))/i,
				/(sam[sung]*)[\s-]*(\w+-?[\w-]*)/i,
				/sec-((sgh\w+))/i
			],
			[[VENDOR, "Samsung"], MODEL, [TYPE, MOBILE]],
			[/sie-(\w*)/i],
			[MODEL, [VENDOR, "Siemens"], [TYPE, MOBILE]],
			[/(maemo|nokia).*(n900|lumia\s\d+)/i, /(nokia)[\s_-]?([\w-]*)/i],
			[[VENDOR, "Nokia"], MODEL, [TYPE, MOBILE]],
			[/android\s3\.[\s\w;-]{10}(a\d{3})/i],
			[MODEL, [VENDOR, "Acer"], [TYPE, TABLET]],
			[/android.+([vl]k\-?\d{3})\s+build/i],
			[MODEL, [VENDOR, "LG"], [TYPE, TABLET]],
			[/android\s3\.[\s\w;-]{10}(lg?)-([06cv9]{3,4})/i],
			[[VENDOR, "LG"], MODEL, [TYPE, TABLET]],
			[/(lg) netcast\.tv/i],
			[VENDOR, MODEL, [TYPE, SMARTTV]],
			[
				/(nexus\s[45])/i,
				/lg[e;\s\/-]+(\w*)/i,
				/android.+lg(\-?[\d\w]+)\s+build/i
			],
			[MODEL, [VENDOR, "LG"], [TYPE, MOBILE]],
			[/android.+(ideatab[a-z0-9\-\s]+)/i],
			[MODEL, [VENDOR, "Lenovo"], [TYPE, TABLET]],
			[/linux;.+((jolla));/i],
			[VENDOR, MODEL, [TYPE, MOBILE]],
			[/((pebble))app\/[\d\.]+\s/i],
			[VENDOR, MODEL, [TYPE, WEARABLE]],
			[/android.+;\s(oppo)\s?([\w\s]+)\sbuild/i],
			[VENDOR, MODEL, [TYPE, MOBILE]],
			[/crkey/i],
			[[MODEL, "Chromecast"], [VENDOR, "Google"]],
			[/android.+;\s(glass)\s\d/i],
			[MODEL, [VENDOR, "Google"], [TYPE, WEARABLE]],
			[/android.+;\s(pixel c)\s/i],
			[MODEL, [VENDOR, "Google"], [TYPE, TABLET]],
			[/android.+;\s(pixel xl|pixel)\s/i],
			[MODEL, [VENDOR, "Google"], [TYPE, MOBILE]],
			[
				/android.+;\s(\w+)\s+build\/hm\1/i,
				/android.+(hm[\s\-_]*note?[\s_]*(?:\d\w)?)\s+build/i,
				/android.+(mi[\s\-_]*(?:one|one[\s_]plus|note lte)?[\s_]*(?:\d?\w?)[\s_]*(?:plus)?)\s+build/i,
				/android.+(redmi[\s\-_]*(?:note)?(?:[\s_]*[\w\s]+))\s+build/i
			],
			[[MODEL, /_/g, " "], [VENDOR, "Xiaomi"], [TYPE, MOBILE]],
			[/android.+(mi[\s\-_]*(?:pad)(?:[\s_]*[\w\s]+))\s+build/i],
			[[MODEL, /_/g, " "], [VENDOR, "Xiaomi"], [TYPE, TABLET]],
			[/android.+;\s(m[1-5]\snote)\sbuild/i],
			[MODEL, [VENDOR, "Meizu"], [TYPE, TABLET]],
			[
				/android.+a000(1)\s+build/i,
				/android.+oneplus\s(a\d{4})\s+build/i
			],
			[MODEL, [VENDOR, "OnePlus"], [TYPE, MOBILE]],
			[/android.+[;\/]\s*(RCT[\d\w]+)\s+build/i],
			[MODEL, [VENDOR, "RCA"], [TYPE, TABLET]],
			[/android.+[;\/\s]+(Venue[\d\s]{2,7})\s+build/i],
			[MODEL, [VENDOR, "Dell"], [TYPE, TABLET]],
			[/android.+[;\/]\s*(Q[T|M][\d\w]+)\s+build/i],
			[MODEL, [VENDOR, "Verizon"], [TYPE, TABLET]],
			[/android.+[;\/]\s+(Barnes[&\s]+Noble\s+|BN[RT])(V?.*)\s+build/i],
			[[VENDOR, "Barnes & Noble"], MODEL, [TYPE, TABLET]],
			[/android.+[;\/]\s+(TM\d{3}.*\b)\s+build/i],
			[MODEL, [VENDOR, "NuVision"], [TYPE, TABLET]],
			[/android.+;\s(k88)\sbuild/i],
			[MODEL, [VENDOR, "ZTE"], [TYPE, TABLET]],
			[/android.+[;\/]\s*(gen\d{3})\s+build.*49h/i],
			[MODEL, [VENDOR, "Swiss"], [TYPE, MOBILE]],
			[/android.+[;\/]\s*(zur\d{3})\s+build/i],
			[MODEL, [VENDOR, "Swiss"], [TYPE, TABLET]],
			[/android.+[;\/]\s*((Zeki)?TB.*\b)\s+build/i],
			[MODEL, [VENDOR, "Zeki"], [TYPE, TABLET]],
			[
				/(android).+[;\/]\s+([YR]\d{2})\s+build/i,
				/android.+[;\/]\s+(Dragon[\-\s]+Touch\s+|DT)(\w{5})\sbuild/i
			],
			[[VENDOR, "Dragon Touch"], MODEL, [TYPE, TABLET]],
			[/android.+[;\/]\s*(NS-?\w{0,9})\sbuild/i],
			[MODEL, [VENDOR, "Insignia"], [TYPE, TABLET]],
			[/android.+[;\/]\s*((NX|Next)-?\w{0,9})\s+build/i],
			[MODEL, [VENDOR, "NextBook"], [TYPE, TABLET]],
			[
				/android.+[;\/]\s*(Xtreme\_)?(V(1[045]|2[015]|30|40|60|7[05]|90))\s+build/i
			],
			[[VENDOR, "Voice"], MODEL, [TYPE, MOBILE]],
			[/android.+[;\/]\s*(LVTEL\-)?(V1[12])\s+build/i],
			[[VENDOR, "LvTel"], MODEL, [TYPE, MOBILE]],
			[/android.+[;\/]\s*(V(100MD|700NA|7011|917G).*\b)\s+build/i],
			[MODEL, [VENDOR, "Envizen"], [TYPE, TABLET]],
			[/android.+[;\/]\s*(Le[\s\-]+Pan)[\s\-]+(\w{1,9})\s+build/i],
			[VENDOR, MODEL, [TYPE, TABLET]],
			[/android.+[;\/]\s*(Trio[\s\-]*.*)\s+build/i],
			[MODEL, [VENDOR, "MachSpeed"], [TYPE, TABLET]],
			[/android.+[;\/]\s*(Trinity)[\-\s]*(T\d{3})\s+build/i],
			[VENDOR, MODEL, [TYPE, TABLET]],
			[/android.+[;\/]\s*TU_(1491)\s+build/i],
			[MODEL, [VENDOR, "Rotor"], [TYPE, TABLET]],
			[/android.+(KS(.+))\s+build/i],
			[MODEL, [VENDOR, "Amazon"], [TYPE, TABLET]],
			[/android.+(Gigaset)[\s\-]+(Q\w{1,9})\s+build/i],
			[VENDOR, MODEL, [TYPE, TABLET]],
			[/\s(tablet|tab)[;\/]/i, /\s(mobile)(?:[;\/]|\ssafari)/i],
			[[TYPE, util.lowerize], VENDOR, MODEL],
			[/(android[\w\.\s\-]{0,9});.+build/i],
			[MODEL, [VENDOR, "Generic"]]
		],
		engine: [
			[/windows.+\sedge\/([\w\.]+)/i],
			[VERSION, [NAME, "EdgeHTML"]],
			[
				/(presto)\/([\w\.]+)/i,
				/(webkit|trident|netfront|netsurf|amaya|lynx|w3m)\/([\w\.]+)/i,
				/(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i,
				/(icab)[\/\s]([23]\.[\d\.]+)/i
			],
			[NAME, VERSION],
			[/rv\:([\w\.]{1,9}).+(gecko)/i],
			[VERSION, NAME]
		],
		os: [
			[/microsoft\s(windows)\s(vista|xp)/i],
			[NAME, VERSION],
			[
				/(windows)\snt\s6\.2;\s(arm)/i,
				/(windows\sphone(?:\sos)*)[\s\/]?([\d\.\s\w]*)/i,
				/(windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i
			],
			[NAME, [VERSION, mapper.str, maps.os.windows.version]],
			[/(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i],
			[[NAME, "Windows"], [VERSION, mapper.str, maps.os.windows.version]],
			[/\((bb)(10);/i],
			[[NAME, "BlackBerry"], VERSION],
			[
				/(blackberry)\w*\/?([\w\.]*)/i,
				/(tizen)[\/\s]([\w\.]+)/i,
				/(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|contiki)[\/\s-]?([\w\.]*)/i,
				/linux;.+(sailfish);/i
			],
			[NAME, VERSION],
			[/(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]*)/i],
			[[NAME, "Symbian"], VERSION],
			[/\((series40);/i],
			[NAME],
			[/mozilla.+\(mobile;.+gecko.+firefox/i],
			[[NAME, "Firefox OS"], VERSION],
			[
				/(nintendo|playstation)\s([wids34portablevu]+)/i,
				/(mint)[\/\s\(]?(\w*)/i,
				/(mageia|vectorlinux)[;\s]/i,
				/(joli|[kxln]?ubuntu|debian|suse|opensuse|gentoo|(?=\s)arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus)[\/\s-]?(?!chrom)([\w\.-]*)/i,
				/(hurd|linux)\s?([\w\.]*)/i,
				/(gnu)\s?([\w\.]*)/i
			],
			[NAME, VERSION],
			[/(cros)\s[\w]+\s([\w\.]+\w)/i],
			[[NAME, "Chromium OS"], VERSION],
			[/(sunos)\s?([\w\.\d]*)/i],
			[[NAME, "Solaris"], VERSION],
			[/\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]*)/i],
			[NAME, VERSION],
			[/(haiku)\s(\w+)/i],
			[NAME, VERSION],
			[
				/cfnetwork\/.+darwin/i,
				/ip[honead]{2,4}(?:.*os\s([\w]+)\slike\smac|;\sopera)/i
			],
			[[VERSION, /_/g, "."], [NAME, "iOS"]],
			[/(mac\sos\sx)\s?([\w\s\.]*)/i, /(macintosh|mac(?=_powerpc)\s)/i],
			[[NAME, "Mac OS"], [VERSION, /_/g, "."]],
			[
				/((?:open)?solaris)[\/\s-]?([\w\.]*)/i,
				/(aix)\s((\d)(?=\.|\)|\s)[\w\.])*/i,
				/(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms)/i,
				/(unix)\s?([\w\.]*)/i
			],
			[NAME, VERSION]
		]
	};
	var UAParser = function(uastring, extensions) {
		if (typeof uastring === "object") {
			extensions = uastring;
			uastring = undefined;
		}
		if (!(this instanceof UAParser)) {
			return new UAParser(uastring, extensions).getResult();
		}
		var ua =
			uastring ||
			(window && window.navigator && window.navigator.userAgent
				? window.navigator.userAgent
				: EMPTY);
		var rgxmap = extensions ? util.extend(regexes, extensions) : regexes;
		this.getBrowser = function() {
			var browser = { name: undefined, version: undefined };
			mapper.rgx.call(browser, ua, rgxmap.browser);
			browser.major = util.major(browser.version);
			return browser;
		};
		this.getCPU = function() {
			var cpu = { architecture: undefined };
			mapper.rgx.call(cpu, ua, rgxmap.cpu);
			return cpu;
		};
		this.getDevice = function() {
			var device = {
				vendor: undefined,
				model: undefined,
				type: undefined
			};
			mapper.rgx.call(device, ua, rgxmap.device);
			return device;
		};
		this.getEngine = function() {
			var engine = { name: undefined, version: undefined };
			mapper.rgx.call(engine, ua, rgxmap.engine);
			return engine;
		};
		this.getOS = function() {
			var os = { name: undefined, version: undefined };
			mapper.rgx.call(os, ua, rgxmap.os);
			return os;
		};
		this.getResult = function() {
			return {
				ua: this.getUA(),
				browser: this.getBrowser(),
				engine: this.getEngine(),
				os: this.getOS(),
				device: this.getDevice(),
				cpu: this.getCPU()
			};
		};
		this.getUA = function() {
			return ua;
		};
		this.setUA = function(uastring) {
			ua = uastring;
			return this;
		};
		return this;
	};
	UAParser.VERSION = LIBVERSION;
	UAParser.BROWSER = { NAME: NAME, MAJOR: MAJOR, VERSION: VERSION };
	UAParser.CPU = { ARCHITECTURE: ARCHITECTURE };
	UAParser.DEVICE = {
		MODEL: MODEL,
		VENDOR: VENDOR,
		TYPE: TYPE,
		CONSOLE: CONSOLE,
		MOBILE: MOBILE,
		SMARTTV: SMARTTV,
		TABLET: TABLET,
		WEARABLE: WEARABLE,
		EMBEDDED: EMBEDDED
	};
	UAParser.ENGINE = { NAME: NAME, VERSION: VERSION };
	UAParser.OS = { NAME: NAME, VERSION: VERSION };
	if (typeof exports !== UNDEF_TYPE) {
		if (typeof module !== UNDEF_TYPE && module.exports) {
			exports = module.exports = UAParser;
		}
		exports.UAParser = UAParser;
	} else {
		if (typeof define === FUNC_TYPE && define.amd) {
			define(function() {
				return UAParser;
			});
		} else if (window) {
			window.UAParser = UAParser;
		}
	}
	var $ = window && (window.jQuery || window.Zepto);
	if (typeof $ !== UNDEF_TYPE) {
		var parser = new UAParser();
		$.ua = parser.getResult();
		$.ua.get = function() {
			return parser.getUA();
		};
		$.ua.set = function(uastring) {
			parser.setUA(uastring);
			var result = parser.getResult();
			for (var prop in result) {
				$.ua[prop] = result[prop];
			}
		};
	}
})(typeof window === "object" ? window : this);

/*!
 * clipboard.js v2.0.1
 * https://zenorocha.github.io/clipboard.js
 *
 * Licensed MIT © Zeno Rocha
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ClipboardJS"] = factory();
	else
		root["ClipboardJS"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, __webpack_require__(7)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if (typeof exports !== "undefined") {
        factory(module, require('select'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod, global.select);
        global.clipboardAction = mod.exports;
    }
})(this, function (module, _select) {
    'use strict';

    var _select2 = _interopRequireDefault(_select);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var ClipboardAction = function () {
        /**
         * @param {Object} options
         */
        function ClipboardAction(options) {
            _classCallCheck(this, ClipboardAction);

            this.resolveOptions(options);
            this.initSelection();
        }

        /**
         * Defines base properties passed from constructor.
         * @param {Object} options
         */


        _createClass(ClipboardAction, [{
            key: 'resolveOptions',
            value: function resolveOptions() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                this.action = options.action;
                this.container = options.container;
                this.emitter = options.emitter;
                this.target = options.target;
                this.text = options.text;
                this.trigger = options.trigger;

                this.selectedText = '';
            }
        }, {
            key: 'initSelection',
            value: function initSelection() {
                if (this.text) {
                    this.selectFake();
                } else if (this.target) {
                    this.selectTarget();
                }
            }
        }, {
            key: 'selectFake',
            value: function selectFake() {
                var _this = this;

                var isRTL = document.documentElement.getAttribute('dir') == 'rtl';

                this.removeFake();

                this.fakeHandlerCallback = function () {
                    return _this.removeFake();
                };
                this.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;

                this.fakeElem = document.createElement('textarea');
                // Prevent zooming on iOS
                this.fakeElem.style.fontSize = '12pt';
                // Reset box model
                this.fakeElem.style.border = '0';
                this.fakeElem.style.padding = '0';
                this.fakeElem.style.margin = '0';
                // Move element out of screen horizontally
                this.fakeElem.style.position = 'absolute';
                this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';
                // Move element to the same position vertically
                var yPosition = window.pageYOffset || document.documentElement.scrollTop;
                this.fakeElem.style.top = yPosition + 'px';

                this.fakeElem.setAttribute('readonly', '');
                this.fakeElem.value = this.text;

                this.container.appendChild(this.fakeElem);

                this.selectedText = (0, _select2.default)(this.fakeElem);
                this.copyText();
            }
        }, {
            key: 'removeFake',
            value: function removeFake() {
                if (this.fakeHandler) {
                    this.container.removeEventListener('click', this.fakeHandlerCallback);
                    this.fakeHandler = null;
                    this.fakeHandlerCallback = null;
                }

                if (this.fakeElem) {
                    this.container.removeChild(this.fakeElem);
                    this.fakeElem = null;
                }
            }
        }, {
            key: 'selectTarget',
            value: function selectTarget() {
                this.selectedText = (0, _select2.default)(this.target);
                this.copyText();
            }
        }, {
            key: 'copyText',
            value: function copyText() {
                var succeeded = void 0;

                try {
                    succeeded = document.execCommand(this.action);
                } catch (err) {
                    succeeded = false;
                }

                this.handleResult(succeeded);
            }
        }, {
            key: 'handleResult',
            value: function handleResult(succeeded) {
                this.emitter.emit(succeeded ? 'success' : 'error', {
                    action: this.action,
                    text: this.selectedText,
                    trigger: this.trigger,
                    clearSelection: this.clearSelection.bind(this)
                });
            }
        }, {
            key: 'clearSelection',
            value: function clearSelection() {
                if (this.trigger) {
                    this.trigger.focus();
                }

                window.getSelection().removeAllRanges();
            }
        }, {
            key: 'destroy',
            value: function destroy() {
                this.removeFake();
            }
        }, {
            key: 'action',
            set: function set() {
                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';

                this._action = action;

                if (this._action !== 'copy' && this._action !== 'cut') {
                    throw new Error('Invalid "action" value, use either "copy" or "cut"');
                }
            },
            get: function get() {
                return this._action;
            }
        }, {
            key: 'target',
            set: function set(target) {
                if (target !== undefined) {
                    if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {
                        if (this.action === 'copy' && target.hasAttribute('disabled')) {
                            throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                        }

                        if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {
                            throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
                        }

                        this._target = target;
                    } else {
                        throw new Error('Invalid "target" value, use a valid Element');
                    }
                }
            },
            get: function get() {
                return this._target;
            }
        }]);

        return ClipboardAction;
    }();

    module.exports = ClipboardAction;
});

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var is = __webpack_require__(6);
var delegate = __webpack_require__(5);

/**
 * Validates all params and calls the right
 * listener function based on its target type.
 *
 * @param {String|HTMLElement|HTMLCollection|NodeList} target
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listen(target, type, callback) {
    if (!target && !type && !callback) {
        throw new Error('Missing required arguments');
    }

    if (!is.string(type)) {
        throw new TypeError('Second argument must be a String');
    }

    if (!is.fn(callback)) {
        throw new TypeError('Third argument must be a Function');
    }

    if (is.node(target)) {
        return listenNode(target, type, callback);
    }
    else if (is.nodeList(target)) {
        return listenNodeList(target, type, callback);
    }
    else if (is.string(target)) {
        return listenSelector(target, type, callback);
    }
    else {
        throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
    }
}

/**
 * Adds an event listener to a HTML element
 * and returns a remove listener function.
 *
 * @param {HTMLElement} node
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenNode(node, type, callback) {
    node.addEventListener(type, callback);

    return {
        destroy: function() {
            node.removeEventListener(type, callback);
        }
    }
}

/**
 * Add an event listener to a list of HTML elements
 * and returns a remove listener function.
 *
 * @param {NodeList|HTMLCollection} nodeList
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenNodeList(nodeList, type, callback) {
    Array.prototype.forEach.call(nodeList, function(node) {
        node.addEventListener(type, callback);
    });

    return {
        destroy: function() {
            Array.prototype.forEach.call(nodeList, function(node) {
                node.removeEventListener(type, callback);
            });
        }
    }
}

/**
 * Add an event listener to a selector
 * and returns a remove listener function.
 *
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenSelector(selector, type, callback) {
    return delegate(document.body, selector, type, callback);
}

module.exports = listen;


/***/ }),
/* 2 */
/***/ (function(module, exports) {

function E () {
  // Keep this empty so it's easier to inherit from
  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
}

E.prototype = {
  on: function (name, callback, ctx) {
    var e = this.e || (this.e = {});

    (e[name] || (e[name] = [])).push({
      fn: callback,
      ctx: ctx
    });

    return this;
  },

  once: function (name, callback, ctx) {
    var self = this;
    function listener () {
      self.off(name, listener);
      callback.apply(ctx, arguments);
    };

    listener._ = callback
    return this.on(name, listener, ctx);
  },

  emit: function (name) {
    var data = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i = 0;
    var len = evtArr.length;

    for (i; i < len; i++) {
      evtArr[i].fn.apply(evtArr[i].ctx, data);
    }

    return this;
  },

  off: function (name, callback) {
    var e = this.e || (this.e = {});
    var evts = e[name];
    var liveEvents = [];

    if (evts && callback) {
      for (var i = 0, len = evts.length; i < len; i++) {
        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
          liveEvents.push(evts[i]);
      }
    }

    // Remove event from queue to prevent memory leak
    // Suggested by https://github.com/lazd
    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

    (liveEvents.length)
      ? e[name] = liveEvents
      : delete e[name];

    return this;
  }
};

module.exports = E;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, __webpack_require__(0), __webpack_require__(2), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if (typeof exports !== "undefined") {
        factory(module, require('./clipboard-action'), require('tiny-emitter'), require('good-listener'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod, global.clipboardAction, global.tinyEmitter, global.goodListener);
        global.clipboard = mod.exports;
    }
})(this, function (module, _clipboardAction, _tinyEmitter, _goodListener) {
    'use strict';

    var _clipboardAction2 = _interopRequireDefault(_clipboardAction);

    var _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);

    var _goodListener2 = _interopRequireDefault(_goodListener);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var Clipboard = function (_Emitter) {
        _inherits(Clipboard, _Emitter);

        /**
         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
         * @param {Object} options
         */
        function Clipboard(trigger, options) {
            _classCallCheck(this, Clipboard);

            var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));

            _this.resolveOptions(options);
            _this.listenClick(trigger);
            return _this;
        }

        /**
         * Defines if attributes would be resolved using internal setter functions
         * or custom functions that were passed in the constructor.
         * @param {Object} options
         */


        _createClass(Clipboard, [{
            key: 'resolveOptions',
            value: function resolveOptions() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                this.action = typeof options.action === 'function' ? options.action : this.defaultAction;
                this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;
                this.text = typeof options.text === 'function' ? options.text : this.defaultText;
                this.container = _typeof(options.container) === 'object' ? options.container : document.body;
            }
        }, {
            key: 'listenClick',
            value: function listenClick(trigger) {
                var _this2 = this;

                this.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {
                    return _this2.onClick(e);
                });
            }
        }, {
            key: 'onClick',
            value: function onClick(e) {
                var trigger = e.delegateTarget || e.currentTarget;

                if (this.clipboardAction) {
                    this.clipboardAction = null;
                }

                this.clipboardAction = new _clipboardAction2.default({
                    action: this.action(trigger),
                    target: this.target(trigger),
                    text: this.text(trigger),
                    container: this.container,
                    trigger: trigger,
                    emitter: this
                });
            }
        }, {
            key: 'defaultAction',
            value: function defaultAction(trigger) {
                return getAttributeValue('action', trigger);
            }
        }, {
            key: 'defaultTarget',
            value: function defaultTarget(trigger) {
                var selector = getAttributeValue('target', trigger);

                if (selector) {
                    return document.querySelector(selector);
                }
            }
        }, {
            key: 'defaultText',
            value: function defaultText(trigger) {
                return getAttributeValue('text', trigger);
            }
        }, {
            key: 'destroy',
            value: function destroy() {
                this.listener.destroy();

                if (this.clipboardAction) {
                    this.clipboardAction.destroy();
                    this.clipboardAction = null;
                }
            }
        }], [{
            key: 'isSupported',
            value: function isSupported() {
                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];

                var actions = typeof action === 'string' ? [action] : action;
                var support = !!document.queryCommandSupported;

                actions.forEach(function (action) {
                    support = support && !!document.queryCommandSupported(action);
                });

                return support;
            }
        }]);

        return Clipboard;
    }(_tinyEmitter2.default);

    /**
     * Helper function to retrieve attribute value.
     * @param {String} suffix
     * @param {Element} element
     */
    function getAttributeValue(suffix, element) {
        var attribute = 'data-clipboard-' + suffix;

        if (!element.hasAttribute(attribute)) {
            return;
        }

        return element.getAttribute(attribute);
    }

    module.exports = Clipboard;
});

/***/ }),
/* 4 */
/***/ (function(module, exports) {

var DOCUMENT_NODE_TYPE = 9;

/**
 * A polyfill for Element.matches()
 */
if (typeof Element !== 'undefined' && !Element.prototype.matches) {
    var proto = Element.prototype;

    proto.matches = proto.matchesSelector ||
                    proto.mozMatchesSelector ||
                    proto.msMatchesSelector ||
                    proto.oMatchesSelector ||
                    proto.webkitMatchesSelector;
}

/**
 * Finds the closest parent that matches a selector.
 *
 * @param {Element} element
 * @param {String} selector
 * @return {Function}
 */
function closest (element, selector) {
    while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
        if (typeof element.matches === 'function' &&
            element.matches(selector)) {
          return element;
        }
        element = element.parentNode;
    }
}

module.exports = closest;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var closest = __webpack_require__(4);

/**
 * Delegates event to a selector.
 *
 * @param {Element} element
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @param {Boolean} useCapture
 * @return {Object}
 */
function _delegate(element, selector, type, callback, useCapture) {
    var listenerFn = listener.apply(this, arguments);

    element.addEventListener(type, listenerFn, useCapture);

    return {
        destroy: function() {
            element.removeEventListener(type, listenerFn, useCapture);
        }
    }
}

/**
 * Delegates event to a selector.
 *
 * @param {Element|String|Array} [elements]
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @param {Boolean} useCapture
 * @return {Object}
 */
function delegate(elements, selector, type, callback, useCapture) {
    // Handle the regular Element usage
    if (typeof elements.addEventListener === 'function') {
        return _delegate.apply(null, arguments);
    }

    // Handle Element-less usage, it defaults to global delegation
    if (typeof type === 'function') {
        // Use `document` as the first parameter, then apply arguments
        // This is a short way to .unshift `arguments` without running into deoptimizations
        return _delegate.bind(null, document).apply(null, arguments);
    }

    // Handle Selector-based usage
    if (typeof elements === 'string') {
        elements = document.querySelectorAll(elements);
    }

    // Handle Array-like based usage
    return Array.prototype.map.call(elements, function (element) {
        return _delegate(element, selector, type, callback, useCapture);
    });
}

/**
 * Finds closest match and invokes callback.
 *
 * @param {Element} element
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @return {Function}
 */
function listener(element, selector, type, callback) {
    return function(e) {
        e.delegateTarget = closest(e.target, selector);

        if (e.delegateTarget) {
            callback.call(element, e);
        }
    }
}

module.exports = delegate;


/***/ }),
/* 6 */
/***/ (function(module, exports) {

/**
 * Check if argument is a HTML element.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.node = function(value) {
    return value !== undefined
        && value instanceof HTMLElement
        && value.nodeType === 1;
};

/**
 * Check if argument is a list of HTML elements.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.nodeList = function(value) {
    var type = Object.prototype.toString.call(value);

    return value !== undefined
        && (type === '[object NodeList]' || type === '[object HTMLCollection]')
        && ('length' in value)
        && (value.length === 0 || exports.node(value[0]));
};

/**
 * Check if argument is a string.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.string = function(value) {
    return typeof value === 'string'
        || value instanceof String;
};

/**
 * Check if argument is a function.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.fn = function(value) {
    var type = Object.prototype.toString.call(value);

    return type === '[object Function]';
};


/***/ }),
/* 7 */
/***/ (function(module, exports) {

function select(element) {
    var selectedText;

    if (element.nodeName === 'SELECT') {
        element.focus();

        selectedText = element.value;
    }
    else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
        var isReadOnly = element.hasAttribute('readonly');

        if (!isReadOnly) {
            element.setAttribute('readonly', '');
        }

        element.select();
        element.setSelectionRange(0, element.value.length);

        if (!isReadOnly) {
            element.removeAttribute('readonly');
        }

        selectedText = element.value;
    }
    else {
        if (element.hasAttribute('contenteditable')) {
            element.focus();
        }

        var selection = window.getSelection();
        var range = document.createRange();

        range.selectNodeContents(element);
        selection.removeAllRanges();
        selection.addRange(range);

        selectedText = selection.toString();
    }

    return selectedText;
}

module.exports = select;


/***/ })
/******/ ]);
});

document.onreadystatechange = function() {
	// All resources have loaded (document + subresources).
	if (document.readyState === "complete") {
		// Third-party //

		// Init FastClickJS.
		if ("addEventListener" in document) {
			FastClick.attach(document.body);
		}

		// Grab the HTTP library.
		var http = window.app.libs.http;

		// Elements //

		// Get needed elements.
		// var $loader = document.getElementById("loader");
		// var $loader_cont = document.getElementById("loader-cont");
		// var $html = document.getElementsByTagName("html")[0];
		var $topbar = document.getElementById("topbar");
		var $sidebar = document.getElementById("sidebar");
		// var $shadow = document.getElementById("tb-shadow");
		var $markdown = document.getElementById("markdown");
		// var $scrolled = document.getElementById("tb-percent-scrolled");
		var $overlay = document.getElementsByClassName("sidebar-overlay")[0];
		var $moverlay = document.getElementById("main-overlay");
		var $splash = document.getElementById("splash-loader");
		var $splash_icon = document.getElementById("sl-icon");
		var $tb_title = document.getElementById("scroll-title");
		var $tb_filename = document.getElementById("scroll-filename");
		var $tb_loader = document.getElementById("topbar-loader");
		var $copied_message = document.getElementById("copied-message");

		// Variables //

		// The request filepath.
		var REQUEST_PATH = "./devdocs/data.json";
		var SCROLL_TIME = 250;

		// Functions //

		/**
		 * Find the browser root element. The root element differs
		 *     in browsers. Thid function determines which to use.
		 *     The returned element element can then be used like
		 *     so: $root.scrollTop = 0;
		 *
		 * @return {HTMLElement} - The browser root element.
		 *
		 * @resource [https://gist.github.com/electerious/7ad886432f55cfcb4222]
		 * @resource [https://medium.com/@bdc/stripe-open-source-behind-the-scenes-59790999dea0]
		 */
		var $sroot = (function() {
			if ("scrollingElement" in document) {
				return document.scrollingElement;
			}

			var initial = document.documentElement.scrollTop;
			document.documentElement.scrollTop = initial + 1;

			var updated = document.documentElement.scrollTop;
			document.documentElement.scrollTop = initial;

			return updated > initial ? document.documentElement : document.body;
		})();

		/**
		 * Determines which animation[start|end|interation] event
		 *     the user's browser supports and returns it.
		 *
		 * @param {string} type - The event type: either start,
		 *     end, or iteration.
		 * @return {string} - The browser prefixed transition event.
		 *
		 * @resource [https://davidwalsh.name/css-animation-callback]
		 * @resource [https://github.com/cgabriel5/snippets/blob/master/js/detection/which_animation_transition_event.js]
		 */
		var which_transition_event = function(type) {
			// Lowercase type.
			type = type.toLowerCase();

			var el = document.createElement("div"),
				transitions = {
					transition: "transition",
					// Opera prefix info: [https://developer.mozilla.org/en-US/docs/Web/Events/transitionend]
					OTransition: "oTransition",
					otransition: "otransition",
					MozTransition: "transition",
					WebkitTransition: "webkitTransition",
					MSTransition: "MSTransition"
				};

			for (var transition in transitions) {
				if (el.style[transition] !== undefined) {
					// Cache value.
					var value = transitions[transition];
					// Determine if suffix needs to be capitalized.
					var end = value.match(/[A-Z]/)
						? type.charAt(0).toUpperCase() + type.substring(1)
						: type;

					// Return prefixed event.
					return value + end;
				}
			}
		};

		/**
		 * Determines which animation[start|end|interation] event
		 *     the user's browser supports and returns it.
		 *
		 * @param {string} type - The event type: either start,
		 *     end, or iteration.
		 * @return {string} - The browser prefixed transition event.
		 *
		 * @resource [https://davidwalsh.name/css-animation-callback]
		 * @resource [https://github.com/cgabriel5/snippets/blob/master/js/detection/which_animation_transition_event.js]
		 */
		var which_animation_event = function(type) {
			// lowercase type
			type = type.toLowerCase();
			var el = document.createElement("div"),
				animations = {
					animation: "animation",
					OAnimation: "oAnimation",
					oanimation: "oanimation",
					MozAnimation: "animation",
					WebkitAnimation: "webkitAnimation",
					MSAnimation: "MSAnimation"
				};
			for (var animation in animations) {
				if (el.style[animation] !== undefined) {
					// cache value
					var value = animations[animation];
					// determine if suffix needs to be capitalized
					var end = value.match(/[A-Z]/)
						? type.charAt(0).toUpperCase() + type.substring(1)
						: type;
					// return prefixed event
					return value + end;
				}
			}
		};

		/**
		 * Debounces provided function.
		 *
		 * @param {function} func - The function to debounce.
		 * @param {number} time - The time to debounce by.
		 * @param {object} scope - The scope in which to run function with.
		 * @param {boolean} run_immediately - Flag indicating whether the
		 *     function should run immediately.
		 *
		 * @return {function} - The new debounced function.
		 *
		 * @resource debouncing function from John Hann
		 * @resource [http://unscriptable.com/index.php/2009/03/20/debouncing-javascript-methods/]
		 * @resource [https://www.paulirish.com/2009/throttled-smartresize-jquery-event-handler/]
		 * @resource [https://davidwalsh.name/javascript-debounce-function]
		 * @resource [https://github.com/cgabriel5/snippets/blob/master/js/function/debounce.js]
		 */
		var debounce = function(func, time, scope, run_immediately) {
			var timeout;
			return function() {
				var context = scope || this,
					args = arguments;

				function delayed() {
					if (!run_immediately) {
						func.apply(context, args);
					}
					timeout = null;
				}
				if (timeout) {
					clearTimeout(timeout);
				} else if (run_immediately) {
					func.apply(context, args);
				}
				timeout = setTimeout(delayed, time || 100);
			};
		};

		/**
		 * Throttles provided function.
		 *
		 * @param {function} func - The function to throttle.
		 * @param {number} time - The time to throttle by.
		 * @param {object} scope - The scope in which to run function with.
		 *
		 * @return {function} - The new throttled function.
		 * @resouce [https://remysharp.com/2010/07/21/throttling-function-calls]
		 */
		var throttle = function(func, time, scope) {
			time = time || 250;
			var last, deferTimer;
			return function() {
				var context = scope || this,
					now = +new Date(),
					args = arguments;
				if (last && now < last + time) {
					// hold on to it
					clearTimeout(deferTimer);
					deferTimer = setTimeout(function() {
						last = now;
						func.apply(context, args);
					}, time);
				} else {
					last = now;
					func.apply(context, args);
				}
			};
		};

		/**
		 * Determine correct requestAnimationFrame function.

		 * @return {function} - The correct function to use.
		 */
		var request_aframe = (function() {
			return (
				window.requestAnimationFrame ||
				window.webkitRequestAnimationFrame ||
				window.mozRequestAnimationFrame ||
				function(callback) {
					window.setTimeout(callback, 250 / 60);
				}
			);
		})();

		/**
		 * General animation function.
		 *
		 * @param {object} options - The options object.
		 * @return {undefined} - Nothing.
		 *
		 * @resource [https://codereview.stackexchange.com/a/106993]
		 * @resource [https://javascript.info/js-animation]
		 */
		var animate = function(options) {
			options = options || {};

			// Defaults.
			var duration = options.duration || 1000,
				ease =
					options.easing ||
					// function(n) {
					// 	// [https://github.com/component/ease/blob/master/index.js#L16]
					// 	n *= 2;
					// 	if (n < 1) return 0.5 * n * n;
					// 	return -0.5 * (--n * (n - 2) - 1);
					// },
					function(n) {
						return 0.5 * (1 - Math.cos(Math.PI * n));
					},
				noop = function() {},
				onProgress = options.onProgress || noop,
				onComplete = options.onComplete || noop,
				onSkip = options.onSkip || noop,
				from = options.from,
				to = options.to,
				delay = options.delay,
				// Store the timer ID.
				tid,
				// Relay back some meta data.
				meta = {
					// Store the current animation tick.
					tick: 0,
					to: to,
					from: from
				};

			// A from and to value is required.
			if (typeof from !== "number" || typeof to !== "number") {
				return;
			}

			// Runtime variables.
			var startTime = Date.now();

			// Skip animation when the on skip function returns true and
			// just run the callback.
			if (onSkip() === true) {
				return onComplete(startTime, meta);
			}

			function update() {
				var deltaTime = Date.now() - startTime,
					progress = Math.min(deltaTime / duration, 1),
					factor = ease(progress),
					property,
					value;

				// Increment the tick.
				meta.tick++;

				// Calculate the value.
				value = from + (to - from) * factor;

				// True or False can be returned to stop animation/prevent
				// callback function.
				var result = onProgress(value, meta);
				// True: Stop animation + Run callback.
				// False: Stop animation + Don't run callback.

				// Stop animation progress when false is returned.
				if (result === true || progress === 1) {
					// Stop animation function AND RUN the callback.
					return onComplete(deltaTime, meta);
				} else if (result === false) {
					// Stop animation function AND DON'T run the callback.
					return;
				}

				// Continue requesting the animation frame.
				tid = request_aframe(update);
			}

			// Add a delay if provided.
			if (delay) {
				setTimeout(function() {
					// Run the first frame request.
					tid = request_aframe(update);
				}, delay);
			} else {
				// Run the first frame request.
				tid = request_aframe(update);
			}

			return {
				// [https://stackoverflow.com/a/31282386]
				cancel: function(cb) {
					(window.cancelAnimationFrame ||
						window.mozCancelAnimationFrame)(tid);

					// Run cancel callback if provided.
					if (cb) {
						cb.call(this, meta);
					}
				}
			};
		};

		/**
		 * The loader animation function.
		 *
		 * @param {eventobject} e - The browser event object.
		 * @return {undefined} - Nothing.
		 */
		// var done_loader = false;
		// var loader = function(e, percent) {
		// 	// Start splash animation.
		// 	var $splash = document.getElementById("splash-loader");
		// 	var $splash_icon = document.getElementById("sl-icon");

		// 	if (!done_loader && (percent === 100 || percent === null)) {
		// 		$splash_icon.style.transform = "scale(0.4)";
		// 		// $splash_icon.classList.add("animate-pulse");

		// 		setTimeout(function() {
		// 			$splash.classList.add("opa0");
		// 			$splash_icon.style.transform = "scale(0.6)";
		// 		}, 200);
		// 	} else {
		// 		return;
		// 	}
		// };
		// var loader = function(e, percent) {
		// 	function animate_loader() {
		// 		// Stop animating once the complete flag is set.
		// 		if (done_loader === true) {
		// 			return;
		// 		}

		// 		if (e.lengthComputable && percent) {
		// 			// Update the loader with the percent.
		// 			$loader.style.width = `${percent}%`;

		// 			// Once fully loaded end animating.
		// 			if (percent === 100) {
		// 				done_loader = true;
		// 				return;
		// 			} else {
		// 				// Else continue animating.
		// 				request_aframe(animate_loader);
		// 			}
		// 		} else {
		// 			// Chrome for whatever reason sometimes returns
		// 			// e.lengthComputable as false which prevent the
		// 			// progress loader. Therefore, when the property
		// 			// is returned as false we simply set the progress
		// 			// to complete (100%).

		// 			// End animating.
		// 			$loader.style.width = `100%`;
		// 			done_loader = true;
		// 			return;
		// 		}
		// 	}
		// 	// Start animating.
		// 	request_aframe(animate_loader);
		// };

		/**
		 * Creates the target elements path (target elements parents).
		 *
		 * @param {eventobject} event - The browsers EventObject.
		 * @return {array} parents - The created path array containing
		 *     the target elements parent elements.
		 *
		 * @resource [https://github.com/cgabriel5/snippets/blob/master/js/events/event_path.js]
		 */
		var build_path = function(event) {
			// cache target element
			var element = event.target;
			// there must be a target element...else return empty path
			if (!event.target) return [];
			// start building path
			var parents = [element];
			while (element) {
				// the current parent element
				element = element.parentNode;
				// if parent exists add to array
				if (element) parents.push(element);
			}
			// finally, return the path!
			return parents;
		};

		/**
		 * Parse the URL query parameters.
		 *
		 * @return {object} - Object containing the parameter pairs.
		 */
		var parameters = function() {
			// Get the query.
			var query = location.search.replace(/^\?/, "");

			// Contain parameter key/values here.
			var params = {};

			// Loop over pairs.
			query.split("&").forEach(function(part) {
				var delimiter_index = part.indexOf("=");
				var key = decodeURIComponent(
					part.substring(0, delimiter_index)
				);
				var value = decodeURIComponent(
					part.substring(delimiter_index + 1, part.length)
				);
				params[key] = value;
			});

			return params;
		};

		/**
		 * Scroll to bottom of page.
		 *
		 * @return {undefined} - Nothing.
		 *
		 * @resource [https://stackoverflow.com/a/33193668]
		 */
		function scroll_to_bottom() {
			$sroot.scrollTop = $sroot.scrollHeight;
		}

		/**
		 * Get the amount page the has been y-scrolled as a percent.
		 *
		 * @return {number} - The percent scrolled.
		 *
		 * @resource [https://stackoverflow.com/a/8028584]
		 */
		function percent_scrolled() {
			var h = document.documentElement,
				b = document.body,
				st = "scrollTop",
				sh = "scrollHeight";

			// Calculate the percent.
			var percent =
				(h[st] || b[st]) / ((h[sh] || b[sh]) - h.clientHeight) * 100;

			// If the page is not scrollable reset the percent to 0.
			if (h.scrollHeight === h.clientHeight) {
				percent = 0;
			}

			// Return the percent.
			return percent;
		}

		/**
		 * Detect whether device supports touch events.
		 *
		 * @return {boolean} - Boolean indicating touch support.
		 *
		 * @resource [https://stackoverflow.com/a/20293441]
		 */
		var touchsupport = function() {
			try {
				document.createEvent("TouchEvent");
				return true;
			} catch (e) {
				return false;
			}
		};

		/**
		 * Return the UAParser parsed user agent object.
		 *
		 * @return {object} - The UAParser object.
		 */
		var user_agent = function() {
			return UAParser(navigator.userAgent);
		};

		/**
		 * Detect whether the device a "mobile" device. Basically anything other than a
		 *     desktop device.
		 *
		 * @return {boolean} - Boolean indicating whether the device is "mobile".
		 */
		var is_mobile = function() {
			// Only apply to Chrome WebKit/Desktop browser.
			return user_agent().device.type;
		};

		/**
		 * Detect whether viewport is within "mobile" size.
		 *
		 * @return {boolean} - Boolean indicating whether in "mobile" size.
		 */
		var is_mobile_viewport = function() {
			return !window.matchMedia("(min-width: 769px)").matches;
		};

		/**
		 * Determine whether browser is Chrome and running a desktop device.
		 *
		 * @return {boolean} - Boolean indicating whether browser is Chrome
		 *     and running a desktop device.
		 */
		var is_desktop_chrome = function() {
			// Get the user agent object.
			var ua = user_agent();

			// Only apply to Chrome WebKit/Desktop browser.
			return ua.browser.name &&
				/^(chr)/i.test(ua.browser.name) &&
				!ua.device.type
				? true
				: false;
		};

		/**
		 * Determine whether browser Webkit based, running on a desktop device
		 *     and is not MacOS.
		 *
		 * @return {boolean} - Boolean indicating whether the above conditions
		 *     are true..
		 */
		var is_desktop_webkit = function() {
			// Get the user agent object.
			var ua = user_agent();

			return (
				// No MacOS.
				ua.os.name !== "Mac OS" &&
				// Only Webkit browsers.
				ua.engine.name === "WebKit" &&
				// Must be a desktop device.
				!ua.device.type
			);
		};

		/**
		 * Get the CSS style sheet object that matches the provided title.
		 *
		 * @return {object} - The CSS object stylesheet. Undefined when
		 *     the sheet is not found.
		 */
		var stylesheet = function(title) {
			// Get the sheets.
			var sheets = document.styleSheets;

			// Loop over and return the sheet with the matching title.
			for (var i = 0, l = sheets.length; i < l; i++) {
				var sheet = sheets[i];
				if (sheet.title === title) {
					return sheet;
				}
			}

			// A sheet was not found matching the provided title.
			return undefined;
		};

		/**
		 * Get the provided element's top coordinates.
		 *
		 * @return {number} - The top position.
		 */
		var coors = function($el) {
			// Get the rect information.
			var rect = $el.getBoundingClientRect();

			// Add the page coor positions.
			rect.pageY = rect.top + window.pageYOffset;
			rect.pageX = rect.left + window.pageXOffset;

			// Return rect object.
			return rect;
		};

		/**
		 * Select the text of an element.
		 *
		 * @param  {htmlelement} $el - The element.
		 * @return {undefined} - Nothing.
		 *
		 * @resource [https://www.sanwebe.com/2014/04/select-all-text-in-element-on-click]
		 */
		var selection = function($el) {
			// First clear any current range selection.
			// [https://stackoverflow.com/a/3171348]
			var sel = window.getSelection
				? window.getSelection()
				: document.selection;
			if (sel) {
				if (sel.removeAllRanges) {
					sel.removeAllRanges();
				} else if (sel.empty) {
					sel.empty();
				}
			}

			var sel, range;
			if (window.getSelection && document.createRange) {
				//Browser compatibility
				sel = window.getSelection();
				if (sel.toString() == "") {
					//no text selection
					window.setTimeout(function() {
						range = document.createRange(); //range object
						range.selectNodeContents($el); //sets Range
						sel.removeAllRanges(); //remove all ranges from selection
						sel.addRange(range); //add Range to a Selection.
					}, 1);
				}
			} else if (document.selection) {
				//older ie
				sel = document.selection.createRange();
				if (sel.text == "") {
					//no text selection
					range = document.body.createTextRange(); //Creates TextRange object
					range.moveToElementText($el); //sets Range
					range.select(); //make selection.
				}
			}
		};

		// ------------------------------------------------------------

		// Create a new HTTP request.
		var req = new http(REQUEST_PATH);
		// Parse the data as JSON.
		req.parseJSON(true);
		// Listen to the HTTP request progress event.
		// req.events({
		// 	progress: loader
		// });
		// Run the request.
		req
			.run()
			.then(function(xhr) {
				if (
					xhr.status >= 200 &&
					xhr.status < 300 &&
					xhr.readyState === 4
				) {
					// Return the JSON response.
					return xhr.responseJSON;
				} else {
					return Promise.reject(
						"Failed to load configuration data file."
					);
				}
			})
			.then(function(data) {
				/**
				 * Add MacOS scrollbars style sheet.
				 *
				 * @return {object} - The style sheet object.
				 *
				 * @resource [https://davidwalsh.name/add-rules-stylesheets]
				 */
				(function() {
					// Only if engine is webkit.
					if (user_agent().engine.name !== "WebKit") {
						return;
					}

					// Create the element.
					var style = document.createElement("style");

					// "Name" the sheet.
					style.setAttribute("title", "dd/mac-scrollbars");

					// WebKit hack :(.
					style.appendChild(document.createTextNode(""));

					// Add the <style> element to the page.
					document.head.appendChild(style);

					// Get the sheet itself.
					var sheet = style.sheet;

					// Only enable MacOS style scrollbars when running Chrome
					// on a desktop device.
					if (!is_desktop_webkit()) {
						sheet.disabled = true;
					}

					// Add the styles.
					data.styles_macos_sb.forEach(function(rule, index) {
						sheet.insertRule(rule, sheet.cssRules.length);
					});
				})();

				// $splash_icon.style.transform = "scale(0.4)";
				$splash_icon.classList.add("animate-pulse");

				// // setTimeout(function() {
				// // $splash.classList.add("opa0");
				// // $splash_icon.style.transform = "scale(0.6)";
				// setTimeout(function() {
				// 	$splash_icon.classList.add("opa0");
				// 	// $splash_icon.style.opacity = "0";
				// 	// }, 100);
				// }, 250);

				// Set the title if provided.
				if (data.title) {
					document.title = data.title;

					// Set the topbar information.
					$tb_title.textContent = data.title;
				}

				// Note: Pre-load logo to prevent "blinking in".
				return new Promise(function(resolve, reject) {
					// Only load image if provided in the data object.
					if (data.logo) {
						// Create new HTMLImageElement instance.
						var image = new Image();

						// Attach event listeners to image instance.
						image.onload = function() {
							resolve(data);
						};
						image.onerror = function() {
							reject();
						};

						// Add the image source file.
						image.src = data.logo;
					} else {
						// If the data object does not contain an image simply
						// resolve the promise to continue with the chain.
						resolve(data);
					}
				}).then(null, function() {
					return Promise.reject("Failed to the load the logo.");
				});
			})
			.then(function(data) {
				console.log(data);

				// Variables:Scoped:Inner //

				// Store the currently displayed file.
				var current_file;
				var running_menu_animation;
				var sb_animation;
				var $sb_animation_header;
				var sb_active_el_loader;
				var scroll_to_top;

				// Functions:Scoped:Inner //

				/**
				 * Generatet the CSS loader HTML.
				 *
				 * @param  {string} name - The name of the CSS loader to use.
				 * @param  {number} size - The dimensions the loader should be.
				 * @return {string} - The CSS loader HTML string.
				 */
				function cssloader(name, size) {
					// size = size || 16;
					// return `<div class="loader-base loader-bg-${name ||
					// 	"base"}" style="width:${size}px;height:${size}px;"></div>`;
					return `<div class="mloader" style="width:${size}px;height:${size}px;"></div>`;
				}

				function show_tb_loader() {
					// Show the main overlay.
					$moverlay.classList.remove("none");

					// Show the topbar loader.
					// $tb_loader.innerHTML = data.loader;
					$tb_loader.innerHTML = cssloader("dark", 16);
					$tb_loader.classList.remove("none");
				}

				function hide_tb_loader() {
					// Show the main overlay.
					$moverlay.classList.add("none");

					// Hide the topbar loader.
					$tb_loader.classList.remove("add");
					$tb_loader.innerHTML = "";
				}

				function show_loader($el) {
					if (!$el) {
						return;
					}

					// Hide the previous sb filename loader.
					if (sb_active_el_loader) {
						hide_loader(sb_active_el_loader, true);
					}

					show_tb_loader();

					// Show the sidebar loader next to filename.
					// Hide the arrow element.
					$el.children[0].classList.add("none");
					// Add the loader.
					// $el.insertAdjacentHTML("afterbegin", data.loader);
					// $el.children[0].insertAdjacentHTML("afterend", data.loader);
					$el.children[0].insertAdjacentHTML(
						"afterend",
						cssloader("dark", 10)
					);
					$el.children[1].classList.add("mr5");

					// Set the flag.
					sb_active_el_loader = $el;
				}

				function hide_loader($el, skip) {
					if (!$el) {
						return;
					}

					if (skip) {
						// Hide the sidebar loader next to filename.
						// Add the loader.
						$el.removeChild($el.childNodes[1]);
						// Hide the arrow element.
						$el.children[0].classList.remove("none");

						return;
					} else {
						hide_tb_loader();

						// Reset the flag.
						sb_active_el_loader = null;

						// Hide the sidebar loader next to filename.
						// Add the loader.
						$el.removeChild($el.childNodes[1]);
						// Hide the arrow element.
						$el.children[0].classList.remove("none");
					}
				}

				/**
				 * Scroll to header.
				 *
				 * @return {undefined} - Nothing.
				 */
				var scroll = function($el, callback) {
					// Calculate the to y scroll offset position.
					var to = scroll.offset($el);
					var from = window.pageYOffset;

					// Store the scroll position to allow for the cancellation
					// of the animation when any manual scrolling is done.
					var lastpos = null;

					// Cancel any current header scrolling animation.
					if (scroll.animation) {
						scroll.animation.cancel(function() {
							// Remove event listeners.
							scroll.remove_handlers();
						});
						scroll.animation = null;
					}

					// Add event handlers to be able to cancel the scrolling.
					document.addEventListener(
						"touchmove",
						scroll.animation_handler,
						{
							passive: false
						}
					);
					document.addEventListener(
						"wheel",
						scroll.animation_handler,
						false
					);
					document.addEventListener(
						"keydown",
						scroll.animation_handler,
						false
					);

					// Scroll to the header.
					scroll.animation = animate({
						from: from,
						to: to,
						duration: scroll_duration(to),
						onSkip: function() {
							var de = document.documentElement;
							if (
								// When the page is not scrollable
								// (no overflow), skip to immediately invoke
								// the callback.
								de.scrollHeight === de.clientHeight ||
								// Skip if the from/to is the same position.
								Math.floor(to) === Math.floor(from) ||
								Math.abs(to - from) <= 1
							) {
								return true;
							}
						},
						onProgress: function(val, meta) {
							// // Round the value to make canceling the scroll
							// // possible.
							// val = Math.floor(val);

							// // Cancel scroll when manually scrolling.
							// // [https://github.com/madebysource/animated-scrollto#animated-scrollto]
							// if (lastpos) {
							// 	if (Math.abs(lastpos - $sroot.scrollTop) <= 1) {
							// 		lastpos = val;
							// 		// Continue to set scroll position...
							// 	} else {
							// 		// Cancel scrolling.
							// 		scroll.animation.cancel();
							// 		// Return false to not run the callback.
							// 		return false;
							// 	}
							// } else {
							// 	lastpos = val;
							// 	// Continue to set scroll position...
							// }

							// Set the scrolltop value.
							// $sroot.scrollTop = val;

							// Edge case: when scrolling to bottom
							// cancel scrolling once the value exceeds
							// that of the scrollable height. Or else
							// the animation will take longer to end.
							// Causing a sense of lag.
							if (
								// When scrolling down and percent scrolled
								// is >= 100 stop animation.
								Math.round(percent_scrolled()) >= 100 &&
								Math.sign(meta.from - meta.to) === -1
							) {
								// Scroll to the bottom of the page.
								scroll_to_bottom();

								return true;
							}

							// Set the scrolltop value.
							$sroot.scrollTop = val;
						},
						onComplete: function() {
							// Remove event listeners.
							scroll.remove_handlers();

							// Reset the variable.
							scroll.animation = null;

							// Run the callback.
							callback();
						}
					});
				};
				// Track any ongoing scrolling animation.
				scroll.animation = null;
				// Calculate scroll offset for mobile and desktop views.
				scroll.offset = function($el) {
					// Calculate the to y scroll position.
					return is_mobile_viewport()
						? // For "mobile" size.
							coors($el.nextElementSibling).pageY - 86
						: // Desktop size.
							coors($el).pageY - 10;
				};
				scroll.animation_handler = function(e) {
					// Cancel event if no animation is ongoing.
					if (!scroll.animation) {
						return;
					}

					// Keys can also be used: up/down/space-bar/esc keys will
					// cancel the animation.
					if (
						e.type === "keydown" &&
						![38, 40, 32, 27].includes(e.which)
					) {
						return;
					}

					// If a scrolling animation is ongoing cancel the scrolling.

					// Cancel any current header scrolling animation.
					scroll.animation.cancel(function() {
						scroll.remove_handlers();
					});
					scroll.animation = null;

					e.preventDefault();
					e.stopPropagation();
				};
				scroll.remove_handlers = function() {
					// [https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener]

					document.removeEventListener(
						"touchmove",
						scroll.animation_handler,
						false
					);
					document.removeEventListener(
						"wheel",
						scroll.animation_handler,
						false
					);
					document.removeEventListener(
						"keydown",
						scroll.animation_handler,
						false
					);
				};

				// Contain all content headers.
				var headers = {};
				/**
				 * Get the height of a submenu using a virtual element.
				 *
				 * @return {undefined} - Nothing.
				 */
				function get_headers() {
					// Empty the headers object.
					for (var key in headers) {
						if (headers.hasOwnProperty(key)) {
							delete headers[key];
						}
					}

					// document.getElementById("test").innerHTML = "";

					// Take that into account the markdown body top margin.
					var offset =
						getComputedStyle(
							$markdown.children[0],
							null
						).marginTop.replace("px", "") * 1;

					// Get the headers.
					var $headers = document.querySelectorAll(
						"h1,h2,h3,h4,h5,h6"
					);
					// Store the headers top offset positions.
					var list = [];

					// Loop over the headers to get the top offset positions.
					for (var i = 0, l = $headers.length; i < l; i++) {
						// Get the header.
						var $header = $headers[i];

						// Skip if empty (no children).
						if (!$header.childElementCount) {
							continue;
						}

						// Get the top offset position.
						var pos = Math.floor(
							// $header.offsetTop + $header.offsetHeight - offset
							$header.offsetTop - offset - 6
							// $header.getBoundingClientRect().top - offset - 6
						);

						// [http://jsbin.com/filopozege/edit?html,css,output]
						// 						// Inject the clone to the DOM.
						// 						document.getElementById("test").insertAdjacentHTML(
						// 							"afterbegin",

						// 							// <div class="tested" style="
						// 							//     position: absolute;
						// 							//     z-index: ${123 + i};
						// 							//     left: 0;
						// 							//     top: ${$header.offsetTop}px;
						// 							//     width: 100%;
						// 							//     height: 2px;
						// 							//     background: coral;
						// 							// "></div><div class="tested" style="
						// 							//     position: absolute;
						// 							//     z-index: ${124 + i};
						// 							//     left: 0;
						// 							//     top: ${$header.offsetTop - offset - 6}px;
						// 							//     width: 100%;
						// 							//     height: 2px;
						// 							//     background: green;
						// 							// "></div>

						// 							`<div class="tested" style="
						//     position: absolute;
						//     z-index: ${124 + i};
						//     left: 0;
						//     top: ${$header.offsetTop - offset - 6}px;
						//     width: 100%;
						//     height: 2px;
						//     background: blue;
						// "></div>`
						// 						);

						// 						// console.log(
						// 						// 	i,
						// 						// 	offset,
						// 						// 	"coral",
						// 						// 	$header.offsetTop,
						// 						// 	"green",
						// 						// 	$header.offsetTop - offset - 6,
						// 						// 	$header.getBoundingClientRect().top,
						// 						// 	$markdown.children[0].getBoundingClientRect().top
						// 						// );

						// Store the header offset.
						list.push(pos);
						headers[pos] = $header;
					}

					// console.log(">>>>", list, headers);

					// Store the list.
					headers.list = list;
				}

				// Contain all the sidebar submenu heights.
				var heights = {};
				/**
				 * Get the height of a submenu using a virtual element.
				 *
				 * @param {HTMLElement} $new_current - The newly clicked
				 *     menu directory element.
				 * @param {string} filename - The file name.
				 * @return {string} - The submenu height with 'px' unit.
				 */
				function get_height($new_current, filename) {
					// Don't recalculate if previously calculated.
					if (heights.hasOwnProperty(filename)) {
						return heights[filename];
					}

					// Create a virtual clone of the element.
					var clone = $new_current.nextElementSibling.cloneNode(true);
					// Set the height to its normal height.
					clone.style.height = "auto";

					// Get the height using a virtual dom.
					var html = `<div id="virtual-height-element" class="menu">${
						clone.outerHTML
					}</div>`;

					// Inject the clone to the DOM.
					document
						.getElementsByTagName("body")[0]
						.insertAdjacentHTML("afterbegin", html);

					// Get the virtual element.
					var $vel = document.getElementById(
						"virtual-height-element"
					);

					// Calculate the element height.
					var height = getComputedStyle($vel, null).height;

					// Remove the virtual element.
					$vel.parentNode.removeChild($vel);

					// Finally, store the height for future runs.
					heights[filename] = height;

					return height;
				}

				/**
				 * Replace the HTML file content.
				 *
				 * @param  {string} content - The HTML file content.
				 * @return {undefined} - Nothing.
				 */
				function replace_html(content) {
					// [https://ianopolous.github.io/javascript/innerHTML]
					var clone = $markdown.cloneNode(false);
					clone.innerHTML = content;
					$markdown.parentNode.replaceChild(clone, $markdown);
					// $markdown.innerHTML = content;

					// Re-grab the markdown element.
					$markdown = document.getElementById("markdown");

					setTimeout(function() {
						get_headers();
					}, 1500);
				}

				/**
				 * Inject the file name in the topbar. Only for mobile view.
				 *
				 * @param {string} filename - The file name.
				 * @param {object} data - The server data object.
				 * @return {undefined} - Nothing.
				 */
				function inject_filename(filename, data) {
					// If there is not current file name return.
					if (!filename) {
						return;
					}

					// Loop over the data dirs to get the file alias.
					var dirs = data.dirs[0].files;
					for (var i = 0, l = dirs.length; i < l; i++) {
						if (dirs[i].dirname === filename) {
							filename = dirs[i].alias;
							break;
						}
					}

					// Get the needed element.
					var $scroll_tb_file_cont = document.getElementById(
						"scroll-tb-file-cont"
					);

					// If a file name exists, set it.
					if (filename) {
						$scroll_tb_file_cont.classList.remove("none");
						$tb_filename.textContent = filename;
					} else {
						// Else, hide the element.
						$scroll_tb_file_cont.classList.add("none");
					}
				}

				/**
				 * Inject the data HTML to the page.
				 *
				 * @param {string} filename - The file name.
				 * @param {HTMLElement} $new_current - The newly clicked
				 *     menu directory element.
				 * @return {undefined} - Nothing.
				 */
				function inject(filename, $new_current) {
					// Don't inject the same file content when the menu
					// item is clicked again.
					if (filename === current_file) {
						// Get the hash.
						var hash = location.hash;

						// Scroll to hash.
						if (hash) {
							var $el = document.getElementById(hash.slice(1));
							if ($el) {
								// Get the header element.
								var $parent = $el.parentNode;

								// Remove the class to make sure the highlight
								// works.
								$parent.classList.remove(
									"animate-header-highlight"
								);
								// Scroll to the position. Don't use an animation
								// as alt + (<-- or -->) needs to be done and
								// felt very quick.
								setTimeout(function() {
									// Instantly scroll to position.
									$sroot.scrollTop = scroll.offset($parent);

									$parent.classList.add(
										"animate-header-highlight"
									);
								}, 0);
							}
						}

						hide_tb_loader();
						// show_loader($new_current);
						return;
					}

					show_loader($new_current);

					// Default to the first file when one does not exist.
					if (!current_file) {
						current_file = data.first_file;
					}

					// Get the file content.
					var file = data.files[filename];

					// Show 404 file when selected file does not exist.
					if (!file) {
						var error_404 = "_404";
						file = data.files[error_404];
						filename = error_404;
					}

					// Un-highlight/Highlight:

					// Un-highlight the current highlighted menu element.
					var $current = document.querySelector(
						`[data-file="${current_file}"]`
					);
					if ($current) {
						var $parent = $current.parentNode;
						// Remove the highlight.
						$parent.classList.remove("active-page");

						// Animate menu height closing.
						var animation = animate({
							// delay: 30,
							from:
								getComputedStyle(
									$parent.nextElementSibling
								).height.replace("px", "") * 1,
							to: 0,
							duration: 350,
							onProgress: function(val) {
								$parent.nextElementSibling.style.height = `${val}px`;
							}
						});

						// Un-highlight the menu arrow and reset to right
						// position.
						var menu_arrow = $parent.children[0];
						var menu_classes = menu_arrow.classList;
						menu_classes.remove("menu-arrow-active");
						menu_classes.remove("fa-angle-down");
						menu_classes.add("fa-angle-right");
					}

					// Set the new highlight for the new current element.
					if (!$new_current && filename !== "_404") {
						$new_current = document.querySelector(
							`[data-file="${filename}"]`
						).parentNode;
					}
					if (filename !== "_404") {
						// Get the menu arrow element and its CSS classes.
						var menu_arrow = $new_current.children[0];
						var menu_classes = menu_arrow.classList;

						// Change text color to blue.
						$new_current.classList.add("active-page");
						// Change the menu arrow to be active (blue/down).
						menu_classes.add("menu-arrow-active");
						menu_classes.remove("fa-angle-right");
						menu_classes.add("fa-angle-down");

						if (running_menu_animation) {
							// Cancel the current animation.
							running_menu_animation.cancel();
						}

						// Animate menu height opening.
						var animation = animate({
							from: 0,
							to:
								get_height($new_current, filename).replace(
									"px",
									""
								) * 1,
							duration: 400,
							onProgress: function(val) {
								$new_current.nextElementSibling.style.height = `${val}px`;
							},
							onComplete: function(actualDuration, averageFps) {
								$new_current.nextElementSibling.style.opacity = 1;

								// Inject the html.
								replace_html(file);

								// Show the current filename.
								inject_filename(current_file, data);

								// Get the hash.
								var hash = location.hash;

								// Scroll to hash.
								if (hash) {
									var $el = document.getElementById(
										hash.slice(1)
									);
									if ($el) {
										// Get the header element.
										var $parent = $el.parentNode;

										// Remove the class to make sure the highlight
										// works.
										$parent.classList.remove(
											"animate-header-highlight"
										);

										// Let browser know to optimize scrolling.
										perf_hint($sroot, "scroll-position");

										// Use a timeout to let the injected HTML load
										// and parse properly. Otherwise, getBoundingClientRect
										// will return incorrect values.
										setTimeout(function() {
											// Scroll to the header.
											scroll($parent, function() {
												// console.log("C");

												$parent.classList.add(
													"animate-header-highlight"
												);

												// Remove optimization.
												perf_unhint($sroot);
											});
										}, 300);
									}
								}
							}
						});

						// Store the animation to cancel if another animation is needed to run.
						running_menu_animation = animation;
					} else {
						// 404 File.

						// Inject the html.
						replace_html(file);

						// Show the current filename.
						inject_filename(current_file, data);

						// Get the hash.
						var hash = location.hash;

						// Scroll to hash.
						if (hash) {
							var $el = document.getElementById(hash.slice(1));
							if ($el) {
								// Get the header element.
								var $parent = $el.parentNode;

								// Remove the class to make sure the highlight
								// works.
								$parent.classList.remove(
									"animate-header-highlight"
								);

								// Let browser know to optimize scrolling.
								perf_hint($sroot, "scroll-position");

								// Use a timeout to let the injected HTML load
								// and parse properly. Otherwise, getBoundingClientRect
								// will return incorrect values.
								setTimeout(function() {
									// Scroll to the header.
									scroll($parent, function() {
										// console.log("D");

										$parent.classList.add(
											"animate-header-highlight"
										);

										// Remove optimization.
										perf_unhint($sroot);
									});
								}, 300);
							}
						}
					}

					// Reset the active element.
					current_file = filename;
				}

				/**
				 * Determine whether an element has been totally scrolled.
				 *
				 * @return {Boolean} - Boolean indicating whether element has been totally scrolled.
				 *
				 * @resource [https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#Problems_and_solutions]
				 */
				function is_element_max_scrolled($el) {
					return $el.scrollHeight - $el.scrollTop <= $el.clientHeight;
				}

				/**
				 * Function disables mobile rubber band scrolling. When the scrollbar
				 *     is at the very top (scrollTop = 0) or the element has been
				 *     totally scrolled, prevent default browser behavior; i.e. rubber
				 *     band scrolling.
				 *
				 * @return {Undefined} - Nothing.
				 */
				function disable_rubber_band(event, $el, cY) {
					// Get the difference form the touchstart Y and the touchmove Y.
					var clientY = event.targetTouches[0].clientY - cY;

					// Element is at the top of its scroll.
					if ($el.scrollTop <= 0 && clientY > 0) {
						event.preventDefault();
					} else if (is_element_max_scrolled($el) && clientY < 0) {
						// Element is at the top of its scroll.
						event.preventDefault();
					}

					// Use a debounce function to reset the scroll position???
					// Reset the scroll to 1??? // $el.scrollTop = 1;
					// Reset the scroll to max-bottom - 1??? // $el.scrollTop = $el.scrollHeight - 1;
				}

				/**
				 * Show the sidebar.
				 *
				 * @return {undefined} - Nothing.
				 */
				function show_sidebar() {
					request_aframe(function(t) {
						// Show the sidebar.
						$sidebar.classList.add("sidebar-show");

						// Show the overlay.
						var classes_overlay = $overlay.classList;
						classes_overlay.add("tdelay1");
						classes_overlay.remove("none");
						setTimeout(function() {
							classes_overlay.remove("opa0");
							classes_overlay.add("opa1");
						}, 0);
					});
				}

				/**
				 * Hide the sidebar.
				 *
				 * @return {undefined} - Nothing.
				 */
				function hide_sidebar() {
					request_aframe(function(t) {
						// Hide the sidebar.

						// Show the overlay.
						var classes_overlay = $overlay.classList;
						classes_overlay.remove("opa1");
						classes_overlay.add("opa0");

						// Show the sidebar.
						var classes_sidebar = $sidebar.classList;
						classes_sidebar.remove("sidebar-show");
					});
				}

				/**
				 * Tell the browser to prep for a performance gain.
				 *
				 * @return {undefined} - Nothing.
				 *
				 * @resource [https://dev.opera.com/articles/css-will-change-property/]
				 */
				function perf_hint($el, props) {
					$el.style.willChange = props || "transform";
				}

				/**
				 * Remove performance CSS.
				 *
				 * @return {undefined} - Nothing.
				 */
				function perf_unhint($el) {
					$el.style.willChange = "auto";
				}

				/**
				 * Calculate the duration based on the amount needed to
				 *     scroll. The more distance needed to be scrolled,
				 *     the slower the scroll. The shorter the scroll
				 *     distance the faster the scroll animation.
				 *
				 * @param  {number} to - The new "to" location.
				 * @return {number} - The calculated scroll duration.
				 */
				function scroll_duration(to) {
					// Calculate the diff in distance and use that as the duration.
					var duration = Math.abs(window.pageYOffset - to);

					// Set lower and upper time limits.
					// Anything over 1000 gets reset to 1000.
					duration = Math.min(duration, 1000);
					// Anything below 350 gets reset to 350.
					duration = Math.max(duration, 350);

					return duration;

					// // Get the scrolling distance.
					// var delta_distance = Math.abs(to - from);

					// // Calculate the duration.
					// var duration = delta_distance / 1.5 + delta_distance * 0.4;

					// // Reset the duration to fit within the min/max bounds.
					// // [https://stackoverflow.com/a/16861139]
					// duration = Math.min(duration, 800);
					// duration = Math.max(duration, 150);

					// return duration;
				}

				/**
				 * Determine whether the provided element is or is part of
				 *     of a code expander element.
				 *
				 * @param  {htmlelement} $el - The element to check.
				 * @return {htmlelement|false} - The expander element or false it not
				 *     the element.
				 */
				function is_code_expander($el) {
					// Get the target element parents.
					var parents = build_path({ target: $el });

					// Loop over the parents and check if any is a header
					// element.
					for (var i = 0, l = parents.length; i < l; i++) {
						var parent = parents[i];
						if (
							parent.classList &&
							parent.classList.contains("show-code-cont")
						) {
							return parent;
						}
					}

					// Not the element needed.
					return false;
				}

				// AppCode:Scoped:Inner //

				// Enclose in a timeout to give the loader a chance to fade away.
				setTimeout(function() {
					// Embed the logo to the page if it exists.
					if (data.logo) {
						document.getElementById(
							"menu-dynamic-cont-logo"
						).innerHTML =
							data.logoHTML;
					}

					// Add the sidebar HTML.
					document.getElementById(
						"menu-dynamic-cont"
					).innerHTML = data.menu.join("");

					// Add the social links.
					if (data.socials) {
						document
							.getElementById("sidebar")
							.children[0].insertAdjacentHTML(
								"beforeend",
								data.socials
							);
					}

					// Animate the entire menu.
					document
						.getElementsByClassName("menu")[0]
						.classList.add("animate-fadein");

					// Show the sidebar footer.
					document
						.getElementById("sb-footer")
						.classList.remove("none");

					// Parse the URL query parameters.
					var params = parameters();

					// Inject the file contents to the page. Provide the
					// inject function the page parameter or default to the
					// first file when the page parameter does not exist.
					show_tb_loader();
					inject(params.page ? params.page : data.first_file);

					// // Inject CSS to page.
					// var stylesheets = document.styleSheets;
					// var stylesheet;
					// for (var key in stylesheets) {
					// 	if (stylesheets.hasOwnProperty(key)) {
					// 		var sheet = stylesheets[key];
					// 		var href = sheet.href;
					// 		if (href && href.includes("bundle.min.css")) {
					// 			stylesheet = sheet;
					// 			break;
					// 		}
					// 	}
					// }
					// if (stylesheet) {
					// 	stylesheet.insertRule(
					// 		".sidebar {will-change: transform;}",
					// 		stylesheet.cssRules.length
					// 	);
					// }
				}, 500);

				// EventListeners:Scoped:Inner //

				// var $tb_logo = document.getElementById("tb-logo");
				// var $tb_dirname = document.getElementById("scroll-dirname");
				// var $tb_title = document.getElementById("scroll-title");
				// var $tb_filename = document.getElementById("scroll-filename");
				// var $tb_static = document.getElementById("scroll-static");
				// var $tb_dynamic = document.getElementById("scroll-dynamic");
				// var $tb_scroll = document.getElementById("topbar-scroll");

				// var last_top_text;
				// var scroll_count = -1;
				// var tb2_fadeout_timer;
				// //
				// window.addEventListener(
				// 	"scroll",
				// 	throttle(function(event) {
				// 		// Get the y scroll position.
				// 		var y = Math.floor(window.pageYOffset);

				// 		// // As the scroll event fires many times a second it can
				// 		// // be very taxing on the app performance. Therefore, cut
				// 		// // down to n amount of times the event gets fired.
				// 		// // if (++scroll_count % 3 !== 0) {
				// 		// if (++scroll_count % 2 !== 0) {
				// 		// 	return;
				// 		// }

				// 		// // Get the y scroll position.
				// 		// var y = Math.floor(window.pageYOffset);

				// 		// // Show the percentage scrolled.
				// 		// request_aframe(function(timestamp) {
				// 		// 	$scrolled.style.width = `${percent_scrolled() + ""}%`;
				// 		// });

				// 		// // Show/hide tb shadow.
				// 		// if (!window.matchMedia("(min-width: 769px)").matches) {
				// 		// 	if (y <= 0) {
				// 		// 		$shadow.style.display = "none";
				// 		// 	} else {
				// 		// 		request_aframe(function(timestamp) {
				// 		// 			$shadow.style.display = "block";
				// 		// 			$shadow.style.top =
				// 		// 				y <= 16 ? -15 + y / 4 + "px" : "-10px";
				// 		// 		});
				// 		// 	}
				// 		// }

				// 		// Show the current header thats in view/range.
				// 		var list = headers.list;
				// 		if (list) {
				// 			// [https://stackoverflow.com/a/1147768]
				// 			var body = document.body;
				// 			var max_scroll_height = Math.max(
				// 				body.scrollHeight,
				// 				body.offsetHeight,
				// 				$sroot.clientHeight,
				// 				$sroot.scrollHeight,
				// 				$sroot.offsetHeight
				// 			);

				// 			var $header;
				// 			var last = list[list.length - 1] || 0;
				// 			for (var i = 0, l = list.length; i < l; i++) {
				// 				var current = list[i];
				// 				var next = list[i + 1] || last;
				// 				// If it's the last position extend to the max
				// 				// window scroll height.
				// 				if (l - 1 === i) {
				// 					next = max_scroll_height;
				// 				}

				// 				// Position be either one of the following:
				// 				if (y >= current && y <= next) {
				// 					var $header = headers[current];
				// 					// Store the header.
				// 					headers.active = $header;
				// 					break;
				// 				}
				// 			}

				// 			// if ($header) {
				// 			// 	// $tb_logo.classList.remove("none");
				// 			// 	$tb_static.classList.add("none");
				// 			// 	$tb_dynamic.classList.remove("none");
				// 			// } else {
				// 			// 	// $tb_logo.classList.add("none");
				// 			// 	$tb_dynamic.classList.add("none");
				// 			// 	$tb_static.classList.remove("none");
				// 			// }

				// 			if ($header) {
				// 				if (
				// 					// $tb_scroll.classList.contains("opa0") &&
				// 					$tb_scroll.classList.contains("none") ||
				// 					tb2_fadeout_timer
				// 				) {
				// 					// Clear any existing timer.
				// 					if (tb2_fadeout_timer) {
				// 						clearTimeout(tb2_fadeout_timer);
				// 					}

				// 					// Remove the class.
				// 					$tb_scroll.classList.remove("opa0");
				// 					$tb_scroll.classList.remove("none");
				// 					$tb_scroll.classList.add("opa1");
				// 				}
				// 			} else {
				// 				if (
				// 					// $tb_scroll.classList.contains("opa1") &&
				// 					!$tb_scroll.classList.contains("none") ||
				// 					y <= 0
				// 				) {
				// 					// Remove the class.
				// 					$tb_scroll.classList.remove("opa1");
				// 					$tb_scroll.classList.add("opa0");

				// 					if (!tb2_fadeout_timer) {
				// 						tb2_fadeout_timer = setTimeout(
				// 							function() {
				// 								$tb_scroll.classList.add(
				// 									"none"
				// 								);
				// 								tb2_fadeout_timer = null;
				// 							},
				// 							200
				// 						);
				// 					}
				// 				}

				// 				return;
				// 			}

				// 			var text = $header
				// 				? $header.textContent.trim()
				// 				: data.title;
				// 			// Store the text.
				// 			if (text !== last_top_text) {
				// 				// Get the file name alias from the data.
				// 				var filename = "devdocs";
				// 				var dirs = data.dirs[0].files;
				// 				for (var i = 0, l = dirs.length; i < l; i++) {
				// 					if (dirs[i].dirname === current_file) {
				// 						filename = dirs[i].alias;
				// 						break;
				// 					}
				// 				}

				// 				$tb_dirname.textContent = filename;
				// 				$tb_filename.textContent = text;
				// 				last_top_text = text;
				// 			}
				// 		}
				// 	}, 75)
				// );

				// When the URL changes (history) update the HTML content.
				window.addEventListener("popstate", function(event) {
					// Parse the URL query parameters.
					var params = parameters();

					// Inject the file contents to the page. Provide the
					// inject function the page parameter or default to the
					// first file when the page parameter does not exist.
					show_tb_loader();
					inject(params.page ? params.page : data.first_file);
				});

				// When the URL changes (history) update the HTML content.
				window.addEventListener(
					"resize",
					debounce(function(event) {
						// If the flag is not set then disable the sheet.
						var sheet = stylesheet("dd/mac-scrollbars");
						if (sheet) {
							// Disable the sheet based on user agent condition.
							sheet.disabled = !is_desktop_webkit();
						}

						// When the window is no longer in a mobile size
						// and the sidebar is showing, hide the sidebar and
						// reset the content + topbar.
						// [https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia]
						if (
							!is_mobile_viewport() &&
							getComputedStyle($overlay).display === "block"
						) {
							// Trigger a click on the overlay to hide the sidebar and overlay.
							$overlay.click();
						}

						// // Hide the tb shadow div.
						// if (window.matchMedia("(min-width: 769px)").matches) {
						// 	$shadow.style.display = "none";
						// 	$shadow.style.top = null;
						// }

						get_headers();
					}),
					200
				);

				// Potential Android edge-effect when reaching the top or
				// bottom CSS.
				// height: 0px;width:${_width - 1}px;
				// background: rgba(0, 0, 0, 0.2);
				// top:${_top}px;left:${_left}px;
				// position: fixed;z-index:5;
				// border-radius: 0px 0px 250px 1200px/100px;
				// transition: height 0.2s ease-in-out;

				// [https://stackoverflow.com/a/30112044]
				// [https://stackoverflow.com/a/24915633]
				// Prevent all scrolling when scrolling on the soverlay.
				$overlay.addEventListener("wheel", function(e) {
					e.preventDefault();
				});

				// [https://stackoverflow.com/a/30112044]
				// When scrolling on the sidebar, keep all scrolling to the
				// sidebar itself. Do not allow any scrolling to pass the
				// sidebar. When the top and bottom are reached simply prevent
				// any browser default behavior to stop further scrolling.
				$sidebar.addEventListener("wheel", function(e) {
					if (e.deltaY < 0) {
						// Element is at the top of its scroll.
						if ($sidebar.scrollTop > 0 === false) {
							e.preventDefault();
						}
					} else {
						// Element is at the top of its scroll.
						if (
							!(
								$sidebar.scrollTop + $sidebar.clientHeight <
								$sidebar.scrollHeight
							)
						) {
							e.preventDefault();
						}
					}
				});

				// /**
				//  * Handle the click/touchstart on the dynamic scroll element.
				//  */
				// var dynamic_handler = function(e) {
				// 	var $header = headers.active;

				// 	// Scroll to the header.
				// 	if ($header) {
				// 		$header.classList.remove("animate-header-highlight");

				// 		// Let browser know to optimize scrolling.
				// 		perf_hint($sroot, "scroll-position");

				// 		// Note: Find a way to not have this hard-coded.
				// 		var dynamic_scroller_height = 33;

				// 		// Animation from-to.
				// 		var from = window.pageYOffset;
				// 		var to =
				// 			get_element_top_pos($header) -
				// 			dynamic_scroller_height;

				// 		// Scroll to the header.
				// 		animate({
				// 			from: from,
				// 			to: to,
				// 			duration: scroll_duration(from, to),
				// 			onProgress: function(val) {
				// 				$sroot.scrollTop = val;
				// 			},
				// 			onComplete: function(actualDuration, averageFps) {
				// 				// Highlight the header.
				// 				$header.classList.add("animate-header-highlight");

				// 				// Remove optimization.
				// 				perf_unhint($sroot);
				// 			}
				// 		});

				// 		// Get the anchor href.
				// 		var href = $header.children[0].getAttribute("href");

				// 		// Don't store the same hash. Only store if the hash
				// 		// is different than the current hash.
				// 		if (location.hash !== href) {
				// 			history.pushState({}, null, `${href}`);
				// 		}

				// 		e.preventDefault();
				// 		return;
				// 	}
				// };
				// $tb_scroll.addEventListener("touchstart", dynamic_handler);
				// $tb_scroll.addEventListener("click", dynamic_handler);

				// Listen to clicks.
				document.addEventListener("dblclick", function(e) {
					// Get the target element.
					var $target = e.target;
					var filename;
					var classes = $target.classList;

					function is_code_pre_code_element($el) {
						// Get the target element parents.
						var parents = build_path({ target: $el });

						// Loop over the parents and check if any is a header
						// element.
						for (var i = 0, l = parents.length; i < l; i++) {
							var parent = parents[i];

							// The parent must be a:
							// - pre element
							// - contain only 1 child
							// - child must contain the class "lang-*"

							if (
								parent.classList &&
								parent.tagName === "PRE" &&
								parent.children.length === 1 &&
								/\slang-.*\s/.test(
									" " +
										(parent.children[0].className || "") +
										" "
								)
							) {
								return parent;
							}
						}

						// Not the element needed.
						return false;
					}

					// [https://github.com/zenorocha/clipboard.js/issues/389#issuecomment-301916808]
					// [https://github.com/zenorocha/clipboard.js/issues/112]
					// [https://gist.github.com/rproenca/64781c6a1329b48a455b645d361a9aa3]
					// [https://stackoverflow.com/a/46858939]
					function clipboard($el, event) {
						var cb = new ClipboardJS($el, {
							target: function(trigger) {
								return $el;
							},
							text: function(trigger) {
								return $el.textContent;
							}
						});

						cb.on("success", function(e) {
							cb.off("error");
							cb.off("success");
							cb.destroy();

							// Show the message.
							$copied_message.classList.remove("opa0");
							$copied_message.classList.remove("none");

							// Select the text.
							selection($el);

							if (window.copy_timer) {
								clearTimeout(window.copy_timer);
							}
							window.copy_timer = setTimeout(function() {
								$copied_message.classList.add("opa0");
								window.copy_timer = setTimeout(function() {
									clearTimeout(window.copy_timer);
									window.copy_timer = null;
									delete window.copy_timer;

									$copied_message.classList.add("none");
								}, 2000);
							}, 2000);
						});

						cb.on("error", function(e) {
							cb.off("error");
							cb.off("success");
							cb.destroy();

							if (window.copy_timer) {
								clearTimeout(window.copy_timer);
							}
						});

						// cb.onClick(event);
						cb.onClick({ currentTarget: $el });
					}

					var $el = is_code_pre_code_element($target);
					if ($el) {
						e.preventDefault();
						e.stopPropagation();

						clipboard($el, e);
					}
				});

				document.addEventListener("click", function(e) {
					// Get the target element.
					var $target = e.target;
					var filename;
					var classes = $target.classList;

					// Since using event delegation, check that the clicked
					// element is either the anchor element containing the
					// needed data-attribute or the anchor's parent li
					// element.

					// The clicked element is an li element since it has the
					// l-2 (level-2) class. Since this is the case get the
					// child element's (anchor element) data-attribute.
					if (classes.contains("l-2")) {
						// Get the data-attribute.
						filename = $target.children[0].getAttribute(
							"data-file"
						);

						// If this is the case then the anchor element itself was
						// clicked. Simply get the data-attribute.
					} else if ($target.parentNode.classList.contains("l-2")) {
						// Get the data-attribute.
						filename = $target.getAttribute("data-file");

						// Reset the target element.
						$target = $target.parentNode;
					} else if (classes.contains("link-doc")) {
						// Get the data-attribute.
						filename = $target.getAttribute("data-file");

						// Reset the target element.
						// $target = $target.parentNode;
						$target = document.querySelector(
							`a.link[data-file='${filename}']`
						).parentNode;
					} else if (
						classes.contains("link-heading") ||
						classes.contains("l-3")
					) {
						e.preventDefault();
						e.stopPropagation();

						if ($target.tagName !== "A") {
							// Get the anchor child element.
							$target = $target.children[0];
						}

						// Get the href.
						var href = $target.getAttribute("href");
						// Get the header.
						var $header = document.querySelector(
							`[href='${href}'][class='anchor']`
						).parentNode;

						// Remove the class before adding.
						$header.classList.remove("animate-header-highlight");

						// Let browser know to optimize scrolling.
						perf_hint($sroot, "scroll-position");

						// Store the header to scroll to it later if in the
						// mobile viewport view.
						if (is_mobile_viewport()) {
							$sb_animation_header = $header;

							// Hide the sidebar.
							sb_animation = true;
							hide_sidebar();
						} else {
							// Scroll to the header.
							scroll($header, function() {
								// console.log("A:Desktop");

								// Highlight the header.
								$header.classList.add(
									"animate-header-highlight"
								);

								// Remove optimization.
								perf_unhint($sroot);
							});
						}

						// Don't store the same hash. Only store if the hash
						// is different than the current hash.
						if (location.hash !== href) {
							history.pushState({}, null, `${href}`);
						}

						return;
					} else if (classes.contains("btn-home")) {
						// Get the data-attribute.
						filename = data.first_file;

						// Reset the target element.
						$target = document.querySelector(
							`a.link[data-file='${filename}']`
						).parentNode;
					} else if (
						classes.contains("mobile-menu-ham") &&
						$overlay.style.display !== "block"
					) {
						// The hamburger menu was clicked OR the allowed area
						// range was touched.
						sb_animation = true;

						// Show the sidebar.
						show_sidebar();

						return;
					} else if (classes.contains("sidebar-overlay")) {
						sb_animation = true;

						// Hide the sidebar.
						hide_sidebar();

						return;
					} else if (is_code_expander($target)) {
						// Reset the target.
						$target = is_code_expander($target);

						// Hide the element.
						$target.classList.add("none");
						$target.nextElementSibling.classList.remove("none");

						setTimeout(function() {
							$target.previousElementSibling.classList.remove(
								"none"
							);
						}, 150);
					} else if (classes.contains("expander-close")) {
						var close_code_cont = $target.parentNode.parentNode;

						// Close the target element contain parent element.
						close_code_cont.classList.add("none");
						// Hide the code element.
						document
							.getElementById($target.getAttribute("data-expid"))
							.classList.add("none");
						// Show the show-code-cont element.
						close_code_cont.nextElementSibling.classList.remove(
							"none"
						);
					} else {
						// Check if clicking the header anchor octicon element.
						var $header = false;

						// Get the target element parents.
						var parents = build_path(e);
						// Loop over the parents and check if any is a header
						// element.
						for (var i = 0, l = parents.length; i < l; i++) {
							if (/h\d/i.test(parents[i].tagName)) {
								$header = parents[i];
								break;
							}
						}

						// Skip if empty (no children).
						if (!$header.childElementCount) {
							return;
						}

						// Scroll to the header.
						if ($header) {
							$header.classList.remove(
								"animate-header-highlight"
							);

							// Let browser know to optimize scrolling.
							perf_hint($sroot, "scroll-position");

							// Scroll to the header.
							scroll($header, function() {
								// console.log("B");

								// Highlight the header.
								$header.classList.add(
									"animate-header-highlight"
								);

								// Remove optimization.
								perf_unhint($sroot);
							});

							// Get the anchor href.
							var href = $header.children[0].getAttribute("href");

							// Don't store the same hash. Only store if the hash
							// is different than the current hash.
							if (location.hash !== href) {
								history.pushState({}, null, `${href}`);
							}

							e.preventDefault();
							return;
						}
					}

					// If filename variable is set then a menu item was
					// clicked. Therefore, insert the corresponding HTML into
					// the page.
					if (filename) {
						// Get the dir and file components from the file name.
						var parts = filename.split("/");
						var dir = parts[0];
						// Remove the dir from the parts.
						parts.shift();
						var file = parts.join("/");

						// Only store when the file name does not match the
						// current file name to prevent clogging the history.
						if (filename !== current_file) {
							history.pushState(
								{},
								null,
								`?page=${encodeURIComponent(`${dir}/${file}`)}`
							);
						}

						// Set the HTML.
						inject(filename, $target);

						// // Skip scrolling to the top when its the same file.
						// if (filename !== current_file) {
						// 	// Let browser know to optimize scrolling.
						// 	perf_hint($sroot, "scroll-position");

						// 	// Use a timeout to let the injected HTML load/parse.
						// 	setTimeout(function() {
						// 		// Scroll to the top of the page.
						// 		animate({
						// 			from: window.pageYOffset,
						// 			to: 0,
						// 			duration: scroll_duration(0),
						// 			onProgress: function(val) {
						// 				$sroot.scrollTop = val;
						// 			},
						// 			onComplete: function() {
						// 				// console.log("E");

						// 				// Remove optimization.
						// 				perf_unhint($sroot);
						// 			}
						// 		});
						// 	}, 300);
						// }

						e.preventDefault();
					}
				});

				// [https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver]
				// [https://davidwalsh.name/mutationobserver-api]
				// [https://www.javascripture.com/MutationObserver]
				var observer = new MutationObserver(function(mutations) {
					mutations.forEach(function(mutation) {
						// Get mutation information.
						var nodes_added = mutation.addedNodes;
						var nodes_removed = mutation.removedNodes;
						var $target = mutation.target;

						// Only listen to markdown content changes.
						if (
							$target.id === "app" &&
							nodes_added.length &&
							nodes_removed.length &&
							nodes_added[0].id === "markdown" &&
							nodes_removed[0].id === "markdown"
						) {
							// Reset the link-docs.

							// Get the GitHub data.
							var github = data.github;

							// Get the links.
							var $links = [].slice.call(
								document.getElementsByClassName("link-doc")
							);
							// Store the links length.
							var links_length = $links.length;

							// When no links immediately hide the loader to
							// signal "page load" completion.
							if (!links_length) {
								if (sb_active_el_loader) {
									hide_loader(sb_active_el_loader);
								} else {
									hide_tb_loader();
								}
							} else {
								// Else...reset the links then end "page load"
								// completion.

								// Loop over the links.
								$links.forEach(function($link, i) {
									// Get the data-attribute.
									var filename = $link.getAttribute(
										"data-file"
									);
									var filename_untouched = $link.getAttribute(
										"data-file-untouched"
									);

									if (
										!document.querySelector(
											`a.link[data-file='${filename}']`
										)
									) {
										// If the element does not exist then the file does
										// not exist in the data object. Therefore, try
										// opening the link using the GitHub information.

										// Reset the URL if needed.
										if (
											filename_untouched === "LICENSE.md"
										) {
											filename_untouched = "LICENSE.txt";
										}

										// Build the URL.
										var furl = `https://github.com/${
											github.account_username
										}/${
											github.project_name
										}/blob/master/${filename_untouched}`;

										// Reset the element.
										// Remove the link-doc class.
										$link.classList.remove("link-doc");
										// Reset/set attributes.
										$link.setAttribute("href", furl);
										$link.setAttribute("target", "_blank");
									}

									// On last loop iteration hide the loader.
									if (links_length - 1 === i) {
										if (sb_active_el_loader) {
											hide_loader(sb_active_el_loader);
										} else {
											hide_tb_loader();
										}
									}
								});
							}
						}
					});
				});

				// Mutation config.
				var observerConfig = {
					childList: true,
					// attributes: true,
					// characterData: true,
					subtree: true
					// attributeOldValue: true,
					// characterDataOldValue: true
					// attributeFilter: true
				};

				// Observe body on body.
				observer.observe(document.body, observerConfig);

				// Listen to the end of the splash animation.
				document.addEventListener(
					which_animation_event("start"),
					function(e) {
						if (e.animationName === "animate-pulse") {
							setTimeout(function() {
								// Remove the class and hide the splash elements.
								$splash.classList.add("opa0");
								$topbar.classList.remove("none");
							}, 250);
						}
					}
				);

				// Listen to sidebar showing/hiding transition ends to reset
				// the needed elements.
				document.addEventListener(
					which_transition_event("end"),
					function(e) {
						// Get needed event info.
						var $target = e.target;
						var pname = e.propertyName;

						// // Hide the splash element.
						// if (
						// 	$target.classList.contains("splash-loader-icon") &&
						// 	pname === "opacity"
						// ) {
						// 	// Remove the class and hide the splash elements.
						// 	$splash.classList.add("opa0");
						// 	$topbar.classList.remove("none");
						// }
						if (
							$target.classList.contains("splash-loader") &&
							pname === "opacity"
						) {
							$splash.classList.add("none");
						}

						///////////////////////////

						if ($target === $overlay) {
							// Get the overlay opacity.
							var opacity =
								getComputedStyle($overlay, null).opacity * 1;

							// Get needed classes.
							var classes_overlay = $overlay.classList;
							var classes_sidebar = $sidebar.classList;

							if (opacity === 1) {
								// Sidebar shown.
								// Reset the overlay.
							} else if (opacity === 0) {
								// Sidebar hidden.

								// Note: Having the sidebar "visible", although
								// offscreen causes scrolling to lag in mobile.
								// Therefore, once the overlay fades out "reset"
								// the sidebar by hiding then unhiding it.
								if (is_mobile_viewport()) {
									classes_sidebar.add("none");
									setTimeout(function() {
										classes_sidebar.remove("none");
									}, 0);
								}

								// Reset the overlay.
								classes_overlay.add("none");
								classes_overlay.remove("tdelay1");

								// Scroll to the stored header after sliding
								// the sidebar away if a header exists.
								if ($sb_animation_header) {
									// Scroll to the header.
									scroll($sb_animation_header, function() {
										// console.log("A:Mobile");

										// Highlight the header.
										$sb_animation_header.classList.add(
											"animate-header-highlight"
										);

										// Remove optimization.
										perf_unhint($sroot);

										// Reset the var.
										$sb_animation_header = null;
									});
								}
							}

							// Turn off the animation flag.
							sb_animation = false;
						}
					}
				);

				// [http://patrickmuff.ch/blog/2014/10/01/how-we-fixed-the-webkit-overflow-scrolling-touch-bug-on-ios/]
				// [https://stackoverflow.com/a/33024813]
				// [https://stackoverflow.com/a/41601290]
				// [https://stackoverflow.com/a/41565471]
				if (touchsupport()) {
					var clickTimer;
					document.addEventListener(
						"touchstart",
						function(e) {
							// [https://stackoverflow.com/a/26809354]
							if (!clickTimer) {
								// Single tap.
								clickTimer = setTimeout(function() {
									clearTimeout(clickTimer);
									clickTimer = null;

									// Run the regular code.

									// Prevent further animations if animation ongoing.
									if (sb_animation) {
										return;
									}

									// Get the target element.
									var $target = e.target;
									var classes = $target.classList;

									// Get touched coordinates.
									var touch_info = e.targetTouches[0];
									var x = touch_info.clientX;
									var y = touch_info.clientY;
									// The allowed range the touched pixels can be in
									// to still allow for the mobile trigger to happen.
									var range =
										getComputedStyle(
											$topbar
										).height.replace("px", "") *
											1 -
										1;

									// The hamburger menu was clicked OR the allowed area
									// range was touched.
									if (
										classes.contains("mobile-menu-ham") ||
										(x <= range &&
											y <= range &&
											$overlay.style.display !== "block")
									) {
										// Cancel any current header scrolling animation.
										if (scroll.animation) {
											scroll.animation.cancel();
											scroll.animation = null;
										}

										// Note: Weird browser behavior. Sometimes while
										// header scrolling and the sidebar is opened
										// the sidebar is not visible but still
										// useable. Hiding/showing the sidebar fixes
										// this.
										$sidebar.classList.add("none");
										$sidebar.classList.remove("none");

										sb_animation = true;

										// Show the sidebar.
										show_sidebar();

										// Prevent later click event handlers.
										// [https://stackoverflow.com/a/39575105]
										// [https://stackoverflow.com/a/48536959]
										// [https://stackoverflow.com/a/41289160]
										e.preventDefault();
									} else if (
										classes.contains("sidebar-overlay")
									) {
										sb_animation = true;

										// Hide the sidebar.
										hide_sidebar();

										// Prevent later click event handlers.
										// [https://stackoverflow.com/a/39575105]
										// [https://stackoverflow.com/a/48536959]
										// [https://stackoverflow.com/a/41289160]
										e.preventDefault();
									}
									// else if (is_code_expander($target)) {
									// 	// Reset the target.
									// 	$target = is_code_expander($target);

									// 	// Hide the element.
									// 	$target.classList.add("none");
									// 	$target.nextElementSibling.classList.remove(
									// 		"none"
									// 	);
									// }

									// [https://stackoverflow.com/a/42288386]
									// [https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action]
									// [https://github.com/OwlCarousel2/OwlCarousel2/issues/1790]
									// [https://developers.google.com/web/updates/2017/01/scrolling-intervention]
									// e.preventDefault();
								}, 220);
							} else {
								// Double tap.
								clearTimeout(clickTimer);
								clickTimer = null;

								// Get the target element.
								var $target = e.target;

								function is_code_pre_code_element($el) {
									// Get the target element parents.
									var parents = build_path({ target: $el });

									// Loop over the parents and check if any is a header
									// element.
									for (
										var i = 0, l = parents.length;
										i < l;
										i++
									) {
										var parent = parents[i];

										// The parent must be a:
										// - pre element
										// - contain only 1 child
										// - child must contain the class "lang-*"

										if (
											parent.classList &&
											parent.tagName === "PRE" &&
											parent.children.length === 1 &&
											/\slang-.*\s/.test(
												" " +
													(parent.children[0]
														.className || "") +
													" "
											)
										) {
											return parent;
										}
									}

									// Not the element needed.
									return false;
								}

								var $el = is_code_pre_code_element($target);
								if ($el) {
									e.preventDefault();
									e.stopPropagation();

									// Select the text.
									selection($el);
								}
							}
						},
						{ passive: false }
					);

					// Store the Y position on touch start.
					var _clientY = null;
					// The touchstart handler stores the Y position.
					var touchstart_handler = function(event) {
						if (event.targetTouches.length === 1) {
							// Detect single touch.
							_clientY = event.targetTouches[0].clientY;
						}
					};
					// The touchmove handler cancels the OS rubber band effect.
					var touchmove_handler = function(event) {
						if (event.targetTouches.length === 1) {
							// Get the correct element.
							var $el = $sidebar.contains(event.target)
								? $sidebar
								: $overlay;

							// Disable rubber banding.
							disable_rubber_band(event, $el, _clientY);
						}
					};

					// Touchstart/move event listeners.

					// When the sidebar is scrolled to the upper/lower bounds,
					// reset them. Upper bound scroll top to 1 and lower bound
					// scroll to max-scroll - 1.
					$sidebar.addEventListener(
						"scroll",
						debounce(function(e) {
							// The max scroll amount (lower-bound, max - 1).
							var lbound =
								$sidebar.scrollHeight - $sidebar.clientHeight;
							// The upper bound (0).
							var ubound = $sidebar.scrollTop;

							if (Math.sign(ubound) === -1 || ubound === 0) {
								$sidebar.scrollTop = 1;
								e.preventDefault();
							} else if (ubound >= lbound) {
								$sidebar.scrollTop = lbound - 1;
								e.preventDefault();
							}
						}, 220),
						false
					);

					$sidebar.addEventListener(
						"touchstart",
						touchstart_handler,
						false
					);
					$sidebar.addEventListener(
						"touchmove",
						touchmove_handler,
						false
					);
					$overlay.addEventListener(
						"touchstart",
						touchstart_handler,
						false
					);
					$overlay.addEventListener(
						"touchmove",
						touchmove_handler,
						false
					);

					// // Touch slide code.

					// var reset;
					// var x_start;
					// var velocity;
					// var slide_target;
					// var slide_animation;
					// var sidebar_width;
					// document.body.addEventListener(
					// 	"touchstart",
					// 	function(e) {
					// 		// The touched on element must be the sidebar or a sidebar
					// 		// descendant.
					// 		if (build_path(e).includes($sidebar)) {
					// 			// Get the touch event information.
					// 			var info = e.targetTouches[0];

					// 			// Get the touched element and x coordinate.
					// 			x_start = info.pageX;
					// 			slide_target = info.target;
					// 			// Store the start time/x position to later determine
					// 			// the slide velocity on touchmove.
					// 			velocity = {
					// 				time: e.timeStamp,
					// 				position: x_start
					// 			};

					// 			// Store the sidebar with.
					// 			sidebar_width =
					// 				getComputedStyle(
					// 					$sidebar,
					// 					null
					// 				).width.replace("px", "") * 1;

					// 			// Remove all transitions to animations instant.
					// 			var $els = [
					// 				$sidebar,
					// 				$topbar,
					// 				$markdown,
					// 				$shadow,
					// 				$overlay
					// 			];
					// 			for (var i = 0, l = $els.length; i < l; i++) {
					// 				$els[i].style.transition = "none";
					// 			}

					// 			// Prevent any unintentional scrolling.
					// 			// e.preventDefault();
					// 			// e.stopPropagation();
					// 		}
					// 	}
					// 	// { passive: false }
					// );

					// document.body.addEventListener(
					// 	"touchmove",
					// 	function(e) {
					// 		if (slide_target && velocity) {
					// 			// Get the touch event information.
					// 			var info = e.targetTouches[0];
					// 			var x = info.pageX;

					// 			// Calculate the change in movement.
					// 			var delta_x = x - x_start;
					// 			var delta_x_content = sidebar_width + delta_x;

					// 			// [https://stackoverflow.com/a/10996533]
					// 			// Calculate the swipe velocity.
					// 			// Formula: v = abs(x2 - x1) / (t2 - t1)
					// 			var v =
					// 				Math.abs(x - velocity.position) /
					// 				(e.timeStamp - velocity.time);

					// 			// Default to false.
					// 			reset = false;

					// 			// Set a left bound. Once hit anymore movement
					// 			// will be canceled.
					// 			if (delta_x_content <= 0) {
					// 				return;
					// 			} else if (
					// 				// Once the delta_x_content difference is
					// 				// less than 150 pixels or the velocity is
					// 				// greater or equal to 1 the reset flag is
					// 				// set. Therefore on touchend when the flag
					// 				// is set the sidebar and everything else
					// 				// will be reset.
					// 				delta_x_content <= 150 ||
					// 				Math.floor(v) >= 1
					// 			) {
					// 				reset = true;
					// 			}

					// 			// If the movement is to the left animate the
					// 			// movement.
					// 			if (Math.sign(delta_x) === -1) {
					// 				slide_animation = request_aframe(function(
					// 					timestamp
					// 				) {
					// 					var css_rule = "transform";
					// 					var priority = "important";
					// 					var content_def = `translateX(${delta_x_content}px)`;

					// 					// [https://stackoverflow.com/a/7919637]
					// 					$sidebar.style.setProperty(
					// 						css_rule,
					// 						`translateX(${delta_x}px)`,
					// 						priority
					// 					);
					// 					$topbar.style.setProperty(
					// 						css_rule,
					// 						content_def,
					// 						priority
					// 					);
					// 					$markdown.style.setProperty(
					// 						css_rule,
					// 						content_def,
					// 						priority
					// 					);
					// 					$shadow.style.setProperty(
					// 						css_rule,
					// 						content_def,
					// 						priority
					// 					);

					// 					// As the slide movement happens add opacity
					// 					// to the content elements and sidebar.
					// 					var opacity_calc =
					// 						Math.abs(1 / delta_x) * 40;
					// 					$overlay.style.opacity =
					// 						Math.abs(opacity_calc) - 0.15;
					// 					$sidebar.style.opacity = opacity_calc;
					// 				});

					// 				// Prevent y-scrolling.
					// 				e.preventDefault();
					// 				e.stopPropagation();
					// 			}
					// 		}
					// 	},

					// 	{ passive: false }
					// );

					// document.body.addEventListener("touchend", function(e) {
					// 	// Always reset.
					// 	x_start = null;
					// 	velocity = null;

					// 	if (!slide_target) {
					// 		return;
					// 	}

					// 	var cancel =
					// 		window.cancelAnimationFrame ||
					// 		window.mozCancelAnimationFrame;

					// 	if (reset) {
					// 		// Cancel any on-going sliding animate frame request.
					// 		if (slide_animation) {
					// 			cancel(slide_animation);
					// 			slide_animation = null;
					// 		}

					// 		// Clear variables.
					// 		reset = null;
					// 		slide_target = null;

					// 		// Remove transitions
					// 		$sidebar.removeAttribute("style");
					// 		$topbar.removeAttribute("style");
					// 		$markdown.removeAttribute("style");
					// 		$shadow.removeAttribute("style");
					// 		$overlay.removeAttribute("style");
					// 		$overlay.style.display = "block";

					// 		// The sidebar overlay was clicked.

					// 		// Hide the sidebar.
					// 		$sidebar.classList.remove("sidebar-show");
					// 		$overlay.style.opacity = 0;

					// 		// Slide the topbar + markdown contents to the right.
					// 		$topbar.classList.remove("mobile-slide");
					// 		$markdown.classList.remove("mobile-slide");
					// 		$overlay.style.display = "none";
					// 	} else {
					// 		// The slide movement occurred but the movement was
					// 		// not enough to cause the reset.

					// 		// Cancel any on-going sliding animate frame request.
					// 		if (slide_animation) {
					// 			cancel(slide_animation);
					// 			slide_animation = null;
					// 		}

					// 		// Remove transitions
					// 		$sidebar.removeAttribute("style");
					// 		$topbar.removeAttribute("style");
					// 		$markdown.removeAttribute("style");
					// 		$shadow.removeAttribute("style");
					// 		$overlay.removeAttribute("style");
					// 		$overlay.style.display = "block";
					// 		$overlay.style.opacity = 1;
					// 	}
					// });
				}
			})
			.catch(function(msg) {
				console.error(msg);
			});
	}
};
